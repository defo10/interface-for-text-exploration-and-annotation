{"version":3,"sources":["ProjectionElements/Projection.tsx","ProjectionElements/Sliders.tsx","ProjectionElements/ProjectionParameters.tsx","SidebarElements/ClusterOverview/ClusterTable.tsx","SidebarElements/ClusterOverview/ClusterMerger.tsx","SidebarElements/ClusterOverview/ClustersOverview.tsx","SidebarOverview.tsx","SidebarElements/ClusterDetails/ClusterMenu.tsx","SidebarElements/ClusterDetails/ClusterChangeCommentDialog.tsx","SidebarElements/ClusterDetails/Comment.tsx","SidebarElements/ClusterDetails/ListItemComment.tsx","SidebarElements/ClusterDetails/ClusterDetailsLayout.tsx","SidebarElements/ClusterDetails/index.js","SidebarDetails.tsx","Layout.tsx","Data.tsx","App.tsx","index.js"],"names":["Projection","props","ref","svg","group","scaleTransform","zoomBehavior","fillOpacity","hoverColor","state","this","width","height","setSelectedDatum","allCoordinatesAsArray","selectCluster","labels","d3","append","coordsToShow","selectAll","data","join","enter","attr","call","transition","duration","delay","d","i","coordinates_to_show","update","exit","text","remove","on","event","selected_datum_i","parseInt","target","id","label_kmedoids","getZoomBehavior","transform","getInitScale","selectedCluster","updateColorPoints","selection","scaleFactor","Math","min","scale","drawScatterPlot","selected_datum","length","index","searchResultIndices","hoveredCommentCoordinate","push","x","y","numNeighbors","coordinatesParameters","numNeighborsParameter","minDist","minDistParameter","allCoordinatesFull","allCoordsOfSelectedCluster","filter","el","map","mean_x","_","meanBy","mean_y","delta_x","maxBy","minBy","delta_y","translateTo","scaleTo","k","prevProps","isEqual","sortBy","allCoordinates","clustersToShow","prevState","hasCommentClickedOnChanged","hasSelectedClusterChanged","zoomAroundCluster","haveClustersToShowChanged","haveCoordinatesChanged","haveSearchResultsChanged","highlightSearchResults","hasHoveredCommentCoordinateChanged","showHoveredComment","overflow","Component","useStyles","makeStyles","theme","margin","spacing","slider","color","palette","primary","minWidth","tooltip","fontSize","marks_num_neighbors","value","label","marks_min_dist","Sliders","classes","style","flex","padding","display","Typography","variant","gutterBottom","Tooltip","title","placement","marginLeft","Slider","getAriaValueText","val","aria-labelledby","step","marks","max","onChange","setSelectedCoordinates","className","split","absoluteContainer","position","bottom","opacity","isMouseOver","flexWrap","ProjectionParameters","useState","setIsMouseOver","optionSelected","selectOption","onMouseEnter","onMouseLeave","paddingRight","NativeSelect","e","size","reloadCoordinatesWithSize","coordsAreReloading","CircularProgress","rows","descendingComparator","a","b","orderBy","useTooltipStyles","tootltip","EnhancedTableHead","onSelectAllClick","order","numSelected","rowCount","onRequestSort","classesTooltip","TableHead","TableRow","TableCell","Checkbox","indeterminate","checked","inputProps","numeric","disablePadding","sublabel","headCell","align","sortDirection","TableSortLabel","active","direction","onClick","property","fontWeight","visuallyHidden","paper","backgroundColor","marginBottom","table","border","clip","top","useTablePaginationStyles","spacer","actions","marginRight","input","caption","clustersToRows","clusters","sumComments","sizePrct","toFixed","metric","quality","ClusterTable","dataChanged","setClustersToShow","other","classesTablePagination","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","rowsSorted","array","comparator","stabilizedThis","sort","stableSort","getComparator","useEffect","Paper","TableContainer","Table","aria-label","newSelecteds","n","TableBody","slice","row","name","isItemSelected","indexOf","labelId","hover","nodeName","newSelected","concat","handleRowClick","role","aria-checked","tabIndex","selected","selectedIndex","handleCheckboxClick","component","scope","changedClusterName","changed","TablePagination","rowsPerPageOptions","count","onChangePage","newPage","onChangeRowsPerPage","horizontalContainer","paddingLeft","paddingTop","paddingBottom","rightAlign","gridContainer","gridTemplateColumns","gridRowGap","ClusterMerger","newClusterName","setName","firstLabel","setFirstLabel","secondLabel","setSecondLabel","allClusters","Array","from","Set","groupByVisibleClusters","option","includes","compareByVisibility","aGroup","bGroup","Autocomplete","options","cluster","groupBy","renderInput","params","TextField","textAlign","Button","renameLabels","disabled","marginCard","rightMargin","root","heading","typography","pxToRem","flexBasis","flexShrink","secondaryHeading","secondary","ClustersOverview","headline","expandSentence","mergeExplainer","setMergeExplainer","metaInfo","Card","CardContent","Object","keys","whatAmISeeingTooltip","Accordion","AccordionSummary","expandIcon","ExpandMore","aria-controls","AccordionDetails","buildStyles","createUseStyles","sidebarContainerLeft","SidebarOverview","flexGrow","menuButton","colorPrimary","ClusterMenu","AppBar","Toolbar","marginTop","labelLocal","setLabelLocal","ClusterChangeCommentDialog","open","onClose","onMoveCluster","remainingClusters","without","Dialog","DialogTitle","List","ListSubheader","disableSticky","ListItem","button","ListItemText","autoFocus","ListItemAvatar","Avatar","styleContainer","borderRadius","styleMetaInfos","styleUsername","wordBreak","styleComment","styleDate","fontStyle","btnsContainer","maxHeight","transitionDelay","useCardContentStyles","Comment","dense","added","removed","isRepresentative","cardContentStyles","publishedAt","authorName","cleaned","showClusterChangeDialog","setShowClusterChangeDialog","dataPoint","find","setHoveredCommentCoordinate","oldLabel","newLabel","CardActions","clusterSelected","inline","secondaryAction","ListItemComment","ListItemSecondaryAction","Divider","coverSidebar","prevSelectedCluster","prevLabelLocal","ClusterDetailsLayout","pushToDataChanged","clickedOnCommentRef","useRef","_setLabelLocal","dataOfCluster","hasMovedAlready","isSelectedDatum","sameCluster","dataAddedToThisCluster","dataRemovedFromThisCluster","current","scrollIntoView","behavior","buildComments","type","element","buildHeadlineAndInfo","hasRepresentative","medoid","otherRepresentatives","representatives","setChangedClusterName","original","reprs_index","justifyContent","alignItems","ClusterDetails","sidebarContainer","SidebarDetails","key","minSizePanel","Layout","sidebar_ctx","sidebar_mount","ww","wh","sidebar_height","sidebar_width","svg_width","searchInput","svgKey","setSize","bind","updateSearchResultIndices","setState","offsetHeight","window","innerWidth","innerHeight","addEventListener","removeEventListener","embeddings","searchTerm","searchResults","searchIndex","search","searchResultsCleaned","result","fromEntries","sidebar_style","background","flexDirection","main_style","propsForSidebar","sidebar_orientation","allCoordinatesAsArrayFilt","propsForProjection","minSize","maxSize","defaultSize","newWidth","Data","random_indices","comment_index","allComments","newData","alreadyExisting","newDataChanged","userRevertedChange","noChange","copy","oldLabels","newClustersToShow","labels_new","clusters_new","didMerge","dataChanged_new","calc_quality","callback","Error","coordinates","getRandomIndices","console","log","updateSelectedCoordinates","xs","abs","ys","max_x","max_y","domain","range","arr","indices_arr","len","taken","RangeError","floor","random","howMany","all_coordinates_full","2","0.1","0.2","0.5","0.9","5","10","50","allParamsPairs","flatMap","numNeigbor","mindistEl","allPromisesParamPairs","paramaterPair","num_neighbors","min_dist","fetch","process","then","fetched","json","scaled_coordinates","scaleEmbeddings","Promise","all","newSize","randIndices","JSON","parse","forEach","search_index","lunr","field","add","comment","author","published","maxQuality","_getAllSelectedCoordinates","medoid_pos","distances","coord","sqrt","pow","_normalize_clusters","fetchedReprs","fetchedMedoids","orig_label","medoids","changed_label","medoids_indices","loadCoordinates","loadDataAndSearchIndex","loadLabels","loadClusters","themeForMaterialComponents","responsiveFontSizes","createMuiTheme","main","dark","light","overrides","MuiTableRow","App","ThemeProvider","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b4f7320.chunk.js","sourcesContent":["// this is a component doing all the d3 stuff\n// of the visualization\nimport React, { Component } from 'react'\nimport * as d3 from 'd3'\nimport { Coordinate, PropsFromData } from '../Data'\nimport { ZoomBehavior } from 'd3-zoom'\nimport _ from 'lodash'\n\nexport type PropsForProjection = {\n  width: number,\n  height: number,\n  sidebar_ctx: number,\n  selectedCluster: string | null,\n  selectCluster: (newLabel: string) => void,\n  setSelectedDatum: (newDatumIndex: number) => void,\n  selected_datum: number | null,\n  searchResultIndices: object & {\n    [key: string]: any | null\n  },\n  /** this is the same as allCoordinates with only clusters selected to show, but\n   * arranged as array of arrays of form [x, y, index].\n   * This increases the performance substantially\n   *\n   * its actually a number[] but ts was giving errors when unpacking those\n  */\n  allCoordinatesAsArray: any[]\n} & PropsFromData\n\nclass Projection extends Component<PropsForProjection, {}> {\n  ref: SVGSVGElement | null = null\n  svg: d3.Selection<SVGSVGElement, any, null, undefined> | null = null\n  group: d3.Selection<SVGGElement, any, null, undefined> | null = null\n  scaleTransform: any = null\n  zoomBehavior: ZoomBehavior<SVGSVGElement, Coordinate> | null = null\n  fillOpacity = 0.8\n  hoverColor = 'rgba(245, 124, 0, 1)' // orange\n\n  constructor (props: PropsForProjection) {\n    super(props)\n    this.state = {}\n  }\n\n  async drawScatterPlot () {\n    if (!this.ref) return\n\n    const {\n      width, height, setSelectedDatum, allCoordinatesAsArray,\n      selectCluster, labels\n    } = this.props\n    this.svg = !this.svg ? d3.select(this.ref) : this.svg\n    this.group = !this.group\n      ? this.svg.append('g')\n      : this.group\n\n    const coordsToShow = allCoordinatesAsArray\n\n    const circles = await this.group.selectAll('circle')\n      .data(coordsToShow, ([,, index]) => index)\n      .join(\n        enter => enter.append('circle')\n          .attr('id', ([,, index]) => index)\n          .attr('cx', ([x]) => x)\n          .attr('cy', ([, y]) => y)\n          .attr('fill-opacity', 0.0)\n          .call(enter => enter\n            .transition()\n            .duration(500)\n            .delay((d, i) => i / this.props.coordinates_to_show * 200) // Dynamic delay (i.e. each item delays a little longer)\n            .attr('fill-opacity', this.fillOpacity)\n          )\n        ,\n        update => update\n          .call(update => update\n            .transition()\n            .duration(2000)\n            .attr('cx', ([x]) => x)\n            .attr('cy', ([, y]) => y)\n          ),\n        exit => exit\n          .call(text => text.transition()\n            .duration(500)\n            .delay((d, i) => i / this.props.coordinates_to_show * 200) // Dynamic delay (i.e. each item delays a little longer)\n            .remove()\n            .attr('fill-opacity', 0)\n          )\n      )\n      .attr('r', 0.5)\n      .attr('fill', 'white')\n\n    // this click event causes the react lifecycle method componentDidUpdate\n    // to be called. There, we'll update the colors. (the props in this\n    // function body aren't up to date at that point)\n    circles.on('click', event => {\n      const selected_datum_i = parseInt(event.target.id)\n      setSelectedDatum(selected_datum_i)\n      selectCluster(labels![selected_datum_i].label_kmedoids)\n    })\n\n    // zoom behavior\n    this.zoomBehavior = this.getZoomBehavior(this.group)\n    this.svg.call(this.zoomBehavior)\n\n    // start with scaled up init view if first time, else take previours scale state\n    this.svg.call(this.zoomBehavior.transform, this.scaleTransform || this.getInitScale(width, height))\n\n    if (this.props.selectedCluster) this.updateColorPoints()\n  }\n\n  /**\n   * returns function which applies a transformation after each zoom\n   * event (that is, dragging around + zooming).\n   *\n   * @param selection is the selection of nodes which should be transformed\n   * @returns a zoomBehavior function, to be called on the node on which this behavior\n   * should be bound to.\n   */\n  getZoomBehavior (selection: d3.Selection<any | null, any, any | null, any | null>): ZoomBehavior<any, any> {\n    return d3.zoom().on('zoom', ({ transform }) => {\n      this.scaleTransform = transform\n      selection.attr('transform', transform)\n    })\n  }\n\n  /**\n   * @param {int} width the width of the surrounding svg container\n   * @param {int} height the height of the surrounding svg container\n   * @returns a zoom behavior function with a scale factor that scales\n   * the data to width and height\n   *\n   * NOTE: assumes that the scale defined in {Data.js} is [0,100]\n   */\n  getInitScale (width: number, height: number) {\n    const scaleFactor = Math.min(width / 100, height / 100) // factor to either fill horizontally or vertically\n    return d3.zoomIdentity.scale(scaleFactor)\n  }\n\n  componentDidMount () {\n    this.drawScatterPlot()\n  }\n\n  /**\n   * updates all points so that the clicked point and the points belonging\n   * to its cluster have distinct colors\n   */\n  updateColorPoints () {\n    const { selected_datum, labels, allCoordinatesAsArray } = this.props\n    if (!this.svg || !labels || !this.group) return\n\n    const coordsToShow = allCoordinatesAsArray\n    if (coordsToShow.length === 0) return this.svg.selectAll('circle').remove()\n\n    this.group.selectAll('circle')\n      .data(coordsToShow, ([,, index]) => index)\n      .attr('fill', ([,, index]) => {\n        if (index == selected_datum) return 'cyan'\n        if (this.props.selectedCluster == labels[index].label_kmedoids) return this.hoverColor // orange kinda\n        return 'white'\n      })\n  }\n\n  highlightSearchResults () {\n    if (!this.svg || !this.group) return\n    const { allCoordinatesAsArray, searchResultIndices } = this.props\n    const coordsToShow = allCoordinatesAsArray\n    if (coordsToShow.length === 0) return this.group.selectAll('circle').remove()\n\n    this.group.selectAll('circle')\n      .data(coordsToShow, ([,, index]) => index)\n      .attr('fill', ([,, index]) => {\n        if (searchResultIndices[index]) return this.hoverColor\n        return 'white'\n      })\n  }\n\n  /** highlights the comment the user hovers over in the detail pane */\n  showHoveredComment () {\n    const { labels, allCoordinatesAsArray, hoveredCommentCoordinate } = this.props\n    if (!this.svg || !labels || !this.group) return\n\n    const coordsToShow = allCoordinatesAsArray\n    if (coordsToShow.length === 0) return this.group.selectAll('circle').remove()\n\n    if (hoveredCommentCoordinate) coordsToShow.push([hoveredCommentCoordinate?.x, hoveredCommentCoordinate?.y, hoveredCommentCoordinate?.index])\n\n    this.group.selectAll('circle')\n      .data(coordsToShow, ([,, index]) => index)\n      .join(\n        enter => enter.append('circle')\n          .attr('fill', 'cyan')\n          .attr('fill-opacity', '1')\n          .attr('r', 1)\n          .attr('id', ([,, index]) => index)\n          .attr('cx', ([x]) => x)\n          .attr('cy', ([, y]) => y)\n      )\n  }\n\n  /** zooms around so that cluster center is in the center of svg viewport and all clusters are visible */\n  zoomAroundCluster () {\n    if (!this.zoomBehavior) return\n    if (!this.svg) return\n    if (!this.props.selectedCluster) { // if unselected cluster, show overview\n      const scaleFactor = this.getInitScale(this.props.width, this.props.height)\n\n      this.svg?.transition()\n        .duration(1000)\n        .call(\n          this.zoomBehavior.transform,\n          d3.zoomIdentity.scale(scaleFactor.k)\n        )\n      return\n    }\n\n    const numNeighbors = this.props.coordinatesParameters.numNeighborsParameter\n    const minDist = this.props.coordinatesParameters.minDistParameter\n    if (!this.props.allCoordinatesFull?.[numNeighbors]?.[minDist]) return\n\n    const allCoordsOfSelectedCluster = this.props.labels?.filter(\n      (el) => (el.label_kmedoids === this.props.selectedCluster))\n      .map((el, i) => this.props.allCoordinatesFull?.[numNeighbors]?.[minDist]?.[i]!)\n\n    const mean_x = _.meanBy(allCoordsOfSelectedCluster, 'x') || 15\n    const mean_y = _.meanBy(allCoordsOfSelectedCluster, 'y') || 15\n    // TODO max x and max y, min x and min y, then scale factor just like below\n    // position where mean point is in the center of viewport\n    const delta_x = _.maxBy(allCoordsOfSelectedCluster, 'x')?.x || 0 - (_.minBy(allCoordsOfSelectedCluster, 'x')?.x || 0)\n    const delta_y = _.maxBy(allCoordsOfSelectedCluster, 'y')?.y || 0 - (_.minBy(allCoordsOfSelectedCluster, 'y')?.y || 0)\n    const scaleFactor = Math.min(this.props.width / delta_x, this.props.height / delta_y)\n\n    this.svg?.transition()\n      .duration(500)\n      .call(\n        this.zoomBehavior.translateTo,\n        mean_x, mean_y\n      )\n      .transition()\n      .duration(500)\n      .call(\n        this.zoomBehavior.scaleTo,\n        scaleFactor * 1.3\n      )\n  }\n\n  hasCommentClickedOnChanged (prevProps: PropsForProjection) {\n    return prevProps.selected_datum !== this.props.selected_datum\n  }\n\n  haveCoordinatesChanged (prevProps: PropsForProjection) {\n    return !_.isEqual(_.sortBy(prevProps.allCoordinates), _.sortBy(this.props.allCoordinates))\n  }\n\n  haveSearchResultsChanged (prevProps: PropsForProjection) {\n    return prevProps.searchResultIndices !== this.props.searchResultIndices\n  }\n\n  haveClustersToShowChanged (prevProps: PropsForProjection) {\n    return !_.isEqual(_.sortBy(prevProps.clustersToShow), _.sortBy(this.props.clustersToShow))\n  }\n\n  hasSelectedClusterChanged (prevProps: PropsForProjection) {\n    return prevProps.selectedCluster !== this.props.selectedCluster\n  }\n\n  hasHoveredCommentCoordinateChanged (prevProps: PropsForProjection) {\n    return prevProps.hoveredCommentCoordinate?.index !== this.props.hoveredCommentCoordinate?.index\n  }\n\n  componentDidUpdate (prevProps: PropsForProjection, prevState: {}) {\n    if (this.hasCommentClickedOnChanged(prevProps)) {\n      this.updateColorPoints()\n      return\n    }\n    if (this.hasSelectedClusterChanged(prevProps)) {\n      this.drawScatterPlot()\n      this.zoomAroundCluster()\n      return\n    }\n    if (this.haveClustersToShowChanged(prevProps) || this.haveCoordinatesChanged(prevProps)) {\n      this.drawScatterPlot()\n      return\n    }\n    if (this.haveSearchResultsChanged(prevProps)) return this.highlightSearchResults()\n    if (this.hasHoveredCommentCoordinateChanged(prevProps)) return this.showHoveredComment()\n  }\n\n  render () {\n    const { width, height } = this.props\n    return (\n      <svg ref={(ref) => {\n        this.ref = ref\n      }} width={width} height={height} overflow=\"hidden\"></svg>\n    )\n  }\n}\n\nexport default Projection\n","// this component shows both sliders\n// for the umap parameters\nimport Slider from '@material-ui/core/Slider'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Typography from '@material-ui/core/Typography'\nimport React from 'react'\nimport { ParameterMinDist, ParameterNumNeighbors, PropsFromData } from '../Data'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    height: theme.spacing(3)\n  },\n  slider: {\n    color: theme.palette.text.primary,\n    minWidth: '14em'\n  },\n  tooltip: {\n    fontSize: '0.8em'\n  }\n}))\n\nconst marks_num_neighbors = [\n  {\n    value: 2,\n    label: '2'\n  },\n  {\n    value: 5,\n    label: '5'\n  },\n  {\n    value: 10,\n    label: '10'\n  },\n  {\n    value: 50,\n    label: '50'\n  }\n]\n\nconst marks_min_dist = [\n  {\n    value: 1,\n    label: '0.1'\n  },\n  {\n    value: 2,\n    label: '0.2'\n  },\n  {\n    value: 5,\n    label: '0.5'\n  },\n  {\n    value: 9,\n    label: '0.9'\n  }\n]\n\nexport default function Sliders (props: PropsFromData) {\n  const classes = useStyles()\n\n  const numNeighbors = props.coordinatesParameters.numNeighborsParameter\n  const minDist = props.coordinatesParameters.minDistParameter\n\n  return (\n        <>\n            {/* num neighbors */}\n            <div style={{ flex: '2 auto', padding: '0 16px', display: 'inline' }}>\n                <div>\n                    <Typography variant=\"subtitle2\" gutterBottom style={{ display: 'inline' }}>\n                        Number of neighbors\n                </Typography>\n                    <Tooltip\n                        title={'The size of local neighborhood (in terms of number of neighboring sample points) used for manifold approximation. Larger values result in more global views of the manifold, while smaller values result in more local data being preserved.'}\n                        placement=\"top\"\n                        classes={{ tooltip: classes.tooltip }}\n                    >\n                        <InfoOutlinedIcon style={{ marginLeft: '8px', fontSize: '1em' }} />\n                    </Tooltip>\n                </div>\n                <Slider\n                    getAriaValueText={(val) => `${val}`}\n                    aria-labelledby=\"number of neighbors for underyling umap algorithm\"\n                    step={null}\n                    marks={marks_num_neighbors}\n                    min={2}\n                    max={50}\n                    value={parseInt(numNeighbors)}\n                    onChange={(event, val) => {\n                      if (props.coordinatesParameters.numNeighborsParameter === (`${val}` as ParameterNumNeighbors)) return\n                      props.setSelectedCoordinates(`${val}` as ParameterNumNeighbors, minDist)\n                    }}\n                    className={classes.slider}\n                />\n            </div>\n            {/* min dist */}\n            <div style={{ flex: '2 auto', padding: '0 16px' }}>\n                <div>\n                    <Typography variant=\"subtitle2\" gutterBottom style={{ display: 'inline' }}>\n                        Minimum distance between points\n                </Typography>\n                    <Tooltip\n                        title={'The effective minimum distance between embedded points. Smaller values will result in a more clustered/clumped embedding where nearby points on the manifold are drawn closer together, while larger values will result on a more even dispersal of points.'}\n                        placement=\"top\"\n                        classes={{ tooltip: classes.tooltip }}\n                    >\n                        <InfoOutlinedIcon style={{ marginLeft: '8px', fontSize: '1em' }} />\n                    </Tooltip>\n                </div>\n                <Slider\n                    getAriaValueText={(val) => `${val}`}\n                    aria-labelledby=\"number of mininum distances for underyling umap algorithm\"\n                    step={null}\n                    marks={marks_min_dist}\n                    min={1}\n                    max={9}\n                    value={parseInt(minDist.split('.')[1])} // e.g. '0.1' to 1\n                    onChange={(event, val: number | number[]) => {\n                      if (props.coordinatesParameters.minDistParameter === (`0.${val}` as ParameterMinDist)) return\n                      props.setSelectedCoordinates(numNeighbors, `0.${val}` as ParameterMinDist)\n                    }}\n                    className={classes.slider}\n                />\n            </div>\n        </>\n  )\n}\n","// this component shows all parameters\n// at the bottom of the projection\nimport React, { useState } from 'react'\nimport { CircularProgress, makeStyles, Theme, Typography } from '@material-ui/core'\nimport Sliders from './Sliders'\nimport { PropsForProjection } from './Projection'\nimport NativeSelect from '@material-ui/core/NativeSelect'\n\nconst useStyles = makeStyles<Theme, { width: number, isMouseOver: boolean }>(theme => ({\n  absoluteContainer: {\n    position: 'absolute',\n    margin: `0 ${theme.spacing(1)}`,\n    bottom: theme.spacing(2),\n    opacity: props => props.isMouseOver ? 1.0 : 0.2, // transparent until on mouse over\n    transition: 'opacity 0.1s',\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: '100%'\n  }\n}))\n\ntype SelectOptions = 500 | 1000 | 2000\n\nexport default function ProjectionParameters(props: PropsForProjection) {\n  const [isMouseOver, setIsMouseOver] = useState(false)\n  const [optionSelected, selectOption] = useState(500 as SelectOptions)\n  const classes = useStyles({ width: props.width, isMouseOver: isMouseOver })\n\n  return (\n    <div className={classes.absoluteContainer}\n      onMouseEnter={() => setIsMouseOver(true)}\n      onMouseLeave={() => setIsMouseOver(false)}>\n      <Sliders {...props} />\n      <div style={{ padding: '0 16px' }}>\n        <Typography variant=\"subtitle2\" style={{ display: 'inline', paddingRight: '16px' }}>\n          Sample Size of Comments to Visualize\n        </Typography>\n        <NativeSelect\n          value={optionSelected}\n          onChange={(e) => {\n            const size = parseInt(e.target.value) || 0\n            selectOption(size as SelectOptions)\n            props.reloadCoordinatesWithSize(size)\n          }}\n        >\n          <option value={500}>500</option>\n          <option value={1000}>1000</option>\n          <option value={2000}>2000 (slow)</option>\n        </NativeSelect>\n        {props.coordsAreReloading &&\n          <CircularProgress style={{\n            display: 'inline-block', marginLeft: '8px'\n          }} size=\"1em\"></CircularProgress>\n        }\n      </div>\n    </div>\n  )\n}\n","// this component renders the clusters table\nimport Checkbox from '@material-ui/core/Checkbox'\nimport Paper from '@material-ui/core/Paper'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport Typography from '@material-ui/core/Typography'\nimport PropTypes from 'prop-types'\nimport React, { useEffect, useState } from 'react'\nimport { Cluster } from '../../Data'\nimport { PropsForSidebar } from '../../SidebarOverview'\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined'\nimport { Tooltip } from '@material-ui/core'\n\ntype Row = {\n  label: string,\n  size: number,\n  metric: string,\n  sizePrct: string\n}\n\ntype OrderBy = 'label' | 'size' | 'metric'\n\nlet rows: Row[] = []\n\nfunction descendingComparator(a: Row, b: Row, orderBy: OrderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1\n  }\n  return 0\n}\n\nfunction getComparator(order: string, orderBy: OrderBy) {\n  return order === 'desc'\n    ? (a: Row, b: Row) => descendingComparator(a, b, orderBy)\n    : (a: Row, b: Row) => -descendingComparator(a, b, orderBy)\n}\n\nfunction stableSort(array: Row[], comparator: (a: Row, b: Row) => number) {\n  const stabilizedThis = array.map((el, index) => [el, index])\n  stabilizedThis.sort((a: any, b: any) => {\n    const order = comparator(a[0], b[0])\n    if (order !== 0) return order\n    return a[1] - b[1]\n  })\n  return stabilizedThis.map((el) => el[0] as Row)\n}\n\nconst useTooltipStyles = makeStyles(theme => ({\n  tootltip: {\n    fontSize: '0.8em'\n  }\n}))\n\nfunction EnhancedTableHead(props: any) {\n  const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props\n  const createSortHandler = (property: string) => (event: any) => {\n    onRequestSort(event, property)\n  }\n  const classesTooltip = useTooltipStyles()\n\n  const headCells = [\n    { id: 'label', numeric: false, disablePadding: true, label: 'Cluster Name' },\n    { id: 'size', numeric: true, disablePadding: false, label: 'Size (in\\u00A0%)' },\n    { id: 'metric', numeric: true, disablePadding: false, label: 'Density', sublabel: 'Density describes how close comments of the same cluster lie together, with 0 being the densest cluster and 1 being the farthest spread out cluster.' }\n  ]\n\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\">\n          <Checkbox\n            indeterminate={numSelected > 0 && numSelected < rowCount}\n            checked={rowCount > 0 && numSelected === rowCount}\n            onChange={onSelectAllClick}\n            inputProps={{ 'aria-label': 'show all clusters' }}\n          />\n        </TableCell>\n        {headCells.map((headCell) => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'default'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.sublabel && <Tooltip\n                title={headCell.sublabel}\n                placement=\"bottom-end\"\n                classes={{ tooltip: classesTooltip.tootltip }}\n              >\n                <InfoOutlinedIcon style={{ marginLeft: '8px', fontSize: '1em' }} />\n              </Tooltip>}\n              <Typography style={{ fontWeight: 600 }}>{headCell.label}</Typography>\n              {orderBy === headCell.id\n                ? (\n                  <span className={classes.visuallyHidden}>\n                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                  </span>\n                  )\n                : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  )\n}\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  numSelected: PropTypes.number.isRequired,\n  onRequestSort: PropTypes.func.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n  rowCount: PropTypes.number.isRequired\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    color: 'white',\n    backgroundColor: 'unset',\n    width: '100%',\n    marginBottom: theme.spacing(2)\n  },\n  table: {\n    color: 'white'\n  },\n  visuallyHidden: {\n    border: 0,\n    clip: 'rect(0 0 0 0)',\n    height: 1,\n    margin: -1,\n    overflow: 'hidden',\n    padding: 0,\n    position: 'absolute',\n    top: 20,\n    width: 1\n  }\n}))\n\nconst useTablePaginationStyles = makeStyles((theme) => ({\n  spacer: {\n    flex: '1'\n  },\n  actions: {\n    marginLeft: '0',\n    marginRight: '0'\n  },\n  input: {\n    flex: '1 3 100%',\n    marginLeft: '0',\n    marginRight: '0'\n  },\n  caption: {\n    flex: '1 1 100%'\n  }\n\n}))\n\nfunction clustersToRows(clusters: Cluster, sumComments: number) {\n  const rows: Row[] = []\n  for (const label in clusters) {\n    const sizePrct = (clusters[label].size * 100 / sumComments).toFixed(1)\n    rows.push({ label: label, size: clusters[label].size, metric: clusters[label].quality.toFixed(2), sizePrct: sizePrct })\n  }\n  return rows\n}\n\ntype PropsClusterTable = PropsForSidebar\nexport default function ClusterTable({\n  labels,\n  data,\n  dataChanged,\n  clustersToShow,\n  setClustersToShow,\n  selectCluster,\n  setSelectedDatum,\n  selectedCluster,\n  ...other\n}: PropsClusterTable) {\n  const classes = useStyles()\n  const classesTablePagination = useTablePaginationStyles()\n  const [order, setOrder] = useState('desc')\n  const [orderBy, setOrderBy] = useState('size' as OrderBy)\n  const [page, setPage] = useState(0)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n\n  rows = clustersToRows(other.clusters, labels?.length || 0)\n\n  const handleRequestSort = (event: any, property: OrderBy) => {\n    const isAsc = orderBy === property && order === 'asc'\n    setOrder(isAsc ? 'desc' : 'asc')\n    setOrderBy(property)\n  }\n\n  const handleSelectAllClick = (event: any) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((n) => n.label)\n      setClustersToShow(newSelecteds)\n      return\n    }\n    setClustersToShow([])\n  }\n\n  const handleCheckboxClick = (event: any, name: string) => {\n    const selectedIndex = clustersToShow.indexOf(name)\n    let newSelected: string[] = []\n\n    if (selectedIndex === -1) { // wasn't clicked before\n      newSelected = newSelected.concat(clustersToShow, name)\n    } else if (selectedIndex === 0) { //\n      newSelected = newSelected.concat(clustersToShow.slice(1))\n    } else if (selectedIndex === clustersToShow.length - 1) { // is last one\n      newSelected = newSelected.concat(clustersToShow.slice(0, -1))\n    } else if (selectedIndex > 0) { // unselected\n      newSelected = newSelected.concat(\n        clustersToShow.slice(0, selectedIndex),\n        clustersToShow.slice(selectedIndex + 1)\n      )\n    }\n\n    setClustersToShow(newSelected)\n  }\n\n  const handleRowClick = (event: any, name: string) => {\n    if (event.target.nodeName === 'INPUT') return // skip if over checkbox, which is handled by handleCheckboxClick\n    if (selectedCluster !== name) { // change detail view\n      setSelectedDatum(null)\n      selectCluster(name)\n    }\n    // click checkbox if not clicked yet\n    const selectedIndex = clustersToShow.indexOf(name)\n    let newSelected: string[] = []\n\n    if (selectedIndex === -1) { // wasn't clicked before\n      newSelected = newSelected.concat(clustersToShow, name)\n      setClustersToShow(newSelected)\n    }\n  }\n\n  const handleChangePage = (event: any, newPage: number) => {\n    setPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = (event: any) => {\n    setRowsPerPage(parseInt(event.target.value, 10))\n    setPage(0)\n  }\n\n  const isSelected = (name: string) => clustersToShow.indexOf(name) !== -1\n\n  const rowsSorted = stableSort(rows, getComparator(order, orderBy))\n\n  useEffect(() => {\n    rows = clustersToRows(other.clusters, data?.length || 0)\n  }, [other.clusters, data]) // if clusters change, update rows\n\n  return (\n    <div>\n      <Paper className={classes.paper}>\n        <TableContainer>\n          <Table\n            style={{ width: '100%', minWidth: 'auto' }}\n            className={classes.table}\n            aria-labelledby=\"tableTitle\"\n            size='medium'\n            aria-label=\"cluster table\"\n          >\n            <EnhancedTableHead\n              classes={classes}\n              numSelected={clustersToShow.length}\n              order={order}\n              orderBy={orderBy}\n              onSelectAllClick={handleSelectAllClick}\n              onRequestSort={handleRequestSort}\n              rowCount={rows.length}\n            />\n            <TableBody>\n              {rowsSorted\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row: Row, index: number) => {\n                  const isItemSelected = isSelected(row.label)\n                  const labelId = `enhanced-table-checkbox-${index}`\n                  return (\n                    <TableRow\n                      hover\n                      onClick={(event: any) => handleRowClick(event, row.label)}\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row.label}\n                      selected={isItemSelected}\n                      style={selectedCluster === row.label ? { backgroundColor: 'rgba(245, 124, 0, 0.7)' } : {}}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          color='secondary'\n                          checked={isItemSelected}\n                          inputProps={{ 'aria-labelledby': labelId }}\n                          onClick={(event) => handleCheckboxClick(event, row.label)}\n                        />\n                      </TableCell>\n                      <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                        {selectedCluster === row.label ? other.changedClusterName?.changed : row.label}\n                      </TableCell>\n                      <TableCell align=\"right\">{`${row.size} (${row.sizePrct})`}</TableCell>\n                      <TableCell align=\"right\">{row.metric}</TableCell>\n                    </TableRow>\n                  )\n                })}\n            </TableBody>\n          </Table>\n        </TableContainer>\n        <TablePagination\n          classes={classesTablePagination}\n          rowsPerPageOptions={[10, 20, 45]}\n          component=\"div\"\n          count={rows.length}\n          rowsPerPage={rowsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n          onChangeRowsPerPage={handleChangeRowsPerPage}\n        />\n      </Paper>\n    </div>\n  )\n}\n","import { Button, makeStyles, TextField } from '@material-ui/core'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport React, { useState } from 'react'\nimport { PropsForSidebar } from '../../SidebarOverview'\n\nconst useStyles = makeStyles((theme) => ({\n  horizontalContainer: {\n    paddingRight: theme.spacing(3),\n    paddingLeft: theme.spacing(3),\n    paddingTop: '1em',\n    paddingBottom: '1em',\n    width: 'auto',\n    height: 'auto'\n  },\n  rightAlign: {\n    display: 'block',\n    marginLeft: 'auto',\n    marginRight: '0'\n  },\n  gridContainer: {\n    display: 'grid',\n    gridTemplateColumns: '9fr 1fr',\n    gridRowGap: theme.spacing(1)\n  }\n}))\n\nexport default function ClusterMerger (props: PropsForSidebar) {\n  const classes = useStyles()\n  const [newClusterName, setName] = useState('New Cluster Name')\n  const [firstLabel, setFirstLabel] = useState<string | null>(null)\n  const [secondLabel, setSecondLabel] = useState<string | null>(null)\n\n  const allClusters = Array.from(new Set(props.labels?.map(label => label.label_kmedoids)))\n\n  const merge = () => {\n    if (!firstLabel || !secondLabel) return\n    props.renameLabels([firstLabel, secondLabel], newClusterName)\n    props.setSelectedDatum(null)\n    props.selectCluster(newClusterName)\n    if (!props.clustersToShow.includes(newClusterName)) {\n      props.setClustersToShow([...props.clustersToShow, newClusterName])\n    }\n    setFirstLabel(null)\n    setSecondLabel(null)\n  }\n\n  const groupByVisibleClusters = (option: string) =>\n    (props.clustersToShow?.includes(option))\n      ? 'Visible Clusters'\n      : 'Other Clusters'\n\n  /** comparator to sort array by its visibility in the projection */\n  const compareByVisibility = (a: string, b: string) => {\n    const aGroup = groupByVisibleClusters(a)\n    const bGroup = groupByVisibleClusters(b)\n    if (aGroup < bGroup) return 1\n    else if (aGroup === bGroup) return 0\n    else return -1 // (aGroup > bGroup)\n  }\n\n  return (\n        <>\n            <div className={classes.gridContainer}>\n                <Autocomplete\n                    options={allClusters.filter(cluster => cluster != secondLabel).sort(compareByVisibility)}\n                    groupBy={groupByVisibleClusters}\n                    renderInput={(params: any) => <TextField {...params} label=\"First\" variant=\"outlined\" />}\n                    onChange={(e, value) => setFirstLabel(value!)}\n                    value={firstLabel}\n                />\n                <p style={{ textAlign: 'center' }}>+</p>\n                <Autocomplete\n                    options={allClusters.filter(cluster => cluster != firstLabel).sort(compareByVisibility)}\n                    groupBy={groupByVisibleClusters}\n                    renderInput={(params: any) => <TextField {...params} label=\"Second\" variant=\"outlined\" />}\n                    onChange={(e, value) => setSecondLabel(value!)}\n                    value={secondLabel}\n                />\n                <p style={{ textAlign: 'center' }}>=</p>\n                <TextField\n                    variant='outlined'\n                    value={newClusterName}\n                    onChange={(e) => setName(e.target.value)}\n                />\n            </div>\n            <div className={classes.horizontalContainer}>\n                <Button\n                    className={classes.rightAlign}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={merge}\n                    disabled={!(firstLabel && secondLabel)}\n                >Merge</Button>\n            </div>\n        </>\n  )\n}\n","// shows the content of the cluster overview sidepane\nimport React, { useState } from 'react'\nimport ClusterTable from './ClusterTable'\nimport { PropsForSidebar } from '../../SidebarOverview'\nimport ClusterMerger from './ClusterMerger'\nimport { Accordion, AccordionDetails, AccordionSummary, Card, makeStyles, Tooltip, Typography } from '@material-ui/core'\nimport { ExpandMore } from '@material-ui/icons'\nimport CardContent from '@material-ui/core/CardContent'\n\nexport type PropsForClusterOverview = PropsForSidebar\n\nconst useStyles = makeStyles(theme => ({\n  padding: {\n    padding: theme.spacing(2)\n  },\n  marginCard: {\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    marginBottom: theme.spacing(3)\n  },\n  rightMargin: {\n    marginRight: theme.spacing(2)\n  },\n  root: { // accordion\n    margin: theme.spacing(2)\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary\n  },\n  tootltip: {\n    fontSize: '0.8em'\n  }\n}))\n\n/**\n *\n * @param comments is the subset of the data which has label @param label\n * @param label is the label of said comments\n */\nexport default function ClustersOverview(props: PropsForClusterOverview) {\n  const classes = useStyles()\n  const expandSentence = 'Click to expand'\n  const minimizeSentence = 'Click to minimize'\n  const [mergeExplainer, setMergeExplainer] = useState<string>(expandSentence)\n\n  const buildHeadlineAndInfo = (headline: string, caption: string | null) => (\n    <div className={classes.padding}>\n      <Typography variant='h5'>{headline}</Typography>\n      {caption &&\n        <Typography variant=\"body2\">{caption}</Typography>\n      }\n    </div>\n  )\n\n  const metaInfo = (\n    <Card\n      variant=\"outlined\"\n      className={classes.marginCard}\n    >\n      <CardContent>\n        <Typography variant=\"body1\" gutterBottom>\n          {`Comments in total: ${props.labels?.length || 'undefined'}`}\n        </Typography>\n        <Typography variant=\"body1\">\n          {`Number of clusters: ${Object.keys(props.clusters).length || 'undefined'}`}\n        </Typography>\n      </CardContent>\n    </Card>\n  )\n\n  const whatAmISeeingTooltip = (\n    <Tooltip\n      title=\"This is a list of all clusters. Grey entries (checked checkbox) are currently visible in the visualization. The cluster seen in the details pane (right) is highlighted orange.\"\n      placement=\"bottom-end\"\n      classes={{ tooltip: classes.tootltip }}\n    >\n      <Typography\n        align=\"right\"\n        variant=\"subtitle2\"\n        className={classes.rightMargin}\n      >\n        What am I seeing here?\n      </Typography>\n    </Tooltip>\n  )\n\n  return (\n    <>\n      <Accordion className={classes.root} onChange={() => {\n        if (mergeExplainer === expandSentence) {\n          setMergeExplainer(minimizeSentence)\n        } else {\n          setMergeExplainer(expandSentence)\n        }\n      }}>\n        <AccordionSummary\n          expandIcon={<ExpandMore />}\n          aria-controls=\"cluster merger\"\n          id=\"cluster merger\"\n        >\n          <Typography className={classes.heading}>Merge Clusters</Typography>\n          <Typography className={classes.secondaryHeading}>{mergeExplainer}</Typography>\n        </AccordionSummary>\n        <AccordionDetails style={{ display: 'block' }}>\n          <ClusterMerger {...props} />\n        </AccordionDetails>\n      </Accordion>\n      {buildHeadlineAndInfo('Clusters Overview', 'Browse all clusters.')}\n      {metaInfo}\n      {whatAmISeeingTooltip}\n      <ClusterTable {...props} />\n    </>\n  )\n}\n","// this is the left sidebar, showing the overview\n// of the clusters\nimport React from 'react'\nimport { createUseStyles } from 'react-jss'\nimport { PropsFromData } from './Data'\nimport { LayoutState } from './Layout'\nimport ClustersOverview from './SidebarElements/ClusterOverview/ClustersOverview'\n\nconst buildStyles = createUseStyles({\n  sidebarContainerLeft: {\n    width: '100%',\n    height: '100vh',\n    overflow: 'scroll'\n  }\n})\n\nexport type PropsForSidebar = {\n  sidebar_orientation: string,\n  selected_datum: number | null,\n  selectedCluster: string | null,\n  selectCluster: (newSelectedCluster: string) => void,\n  setSelectedDatum: (newDatumIndex: number | null) => void,\n} & LayoutState & PropsFromData\n\nexport default function SidebarOverview (props: PropsForSidebar) {\n  const classes = buildStyles()\n\n  return (\n    <div className={classes.sidebarContainerLeft}>\n      <div style={{ overflow: 'scroll' }}>\n        <ClustersOverview {...props} />\n      </div>\n    </div>\n  )\n}\n","import AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport { makeStyles, TextField, Theme } from '@material-ui/core'\nimport { PropsForSidebar } from '../../SidebarOverview'\nimport React from 'react'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    color: 'white',\n    marginLeft: theme.spacing(2)\n  },\n  title: {\n    flexGrow: 1\n  },\n  colorPrimary: {\n    backgroundColor: 'rgba(245, 124, 0, 0.7)' // orange kinda\n  }\n})\n)\n\ntype PropsClusterMenu = {\n    labelLocal: string,\n    setLabelLocal: (newLabel: string) => void\n} & PropsForSidebar\n\nexport default function ClusterMenu (props: PropsClusterMenu) {\n  const classes = useStyles()\n\n  // onChange={(e: any) => props.setLabelLocal(e.target.value)}\n  return (\n        <AppBar position='relative' color='primary' classes={{ colorPrimary: classes.colorPrimary }} >\n            <Toolbar style={{ marginTop: '8px' }}>\n                <TextField\n                    inputProps={{ style: { fontSize: '1.5em', fontWeight: 600, padding: '8px' } }}\n                    variant=\"outlined\"\n                    label=\"Change Cluster Name\"\n                    value={props.labelLocal}\n                    onChange={(e: any) => props.setLabelLocal(e.target.value)}\n                />\n            </Toolbar>\n        </AppBar>\n  )\n}\n","import React from 'react'\nimport Avatar from '@material-ui/core/Avatar'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Dialog from '@material-ui/core/Dialog'\nimport AddIcon from '@material-ui/icons/Add'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport { CommentProps } from './Comment'\nimport _ from 'lodash'\n\ntype ClusterChangeCommentDialogProps = {\n    open: boolean,\n} & CommentProps\n\nexport default function ClusterChangeCommentDialog({\n  open,\n  data,\n  labels,\n  clustersToShow,\n  clusters,\n  onClose,\n  i,\n  selectedCluster,\n  onMoveCluster,\n  ...other\n}: ClusterChangeCommentDialogProps) {\n  const remainingClusters = _.without(Object.keys(clusters), ...clustersToShow)\n\n  return (\n        <Dialog onClose={() => onMoveCluster(null, i)} aria-labelledby=\"dialog for changing the cluster of the selected comment\" open={open}>\n            <DialogTitle>Change Cluster</DialogTitle>\n            <List>\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\" disableSticky>Selected Cluster</ListSubheader>\n                <ListItem onClick={() => onMoveCluster(selectedCluster, i)} button key={`clusterpicker-${-1}`}>\n                    <ListItemText primary={selectedCluster} secondary={`size: ${clusters[selectedCluster || '']?.size}    density: ${clusters[selectedCluster || '']?.quality.toFixed(3)}`} />\n                </ListItem>\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\" disableSticky>Visible Clusters</ListSubheader>\n                {\n                    clustersToShow.map((cluster: string) => {\n                      // eslint-disable-next-line array-callback-return\n                      if (cluster === labels![i].label_kmedoids) return\n                      return (\n                            <ListItem onClick={() => onMoveCluster(cluster, i)} button key={`clusterpicker-${cluster}`}>\n                                <ListItemText primary={cluster} secondary={`size: ${clusters[cluster]?.size || 'N/A'}    density: ${clusters[cluster]?.quality.toFixed(3) || 'N/A'}`} />\n                            </ListItem>)\n                    })\n                }\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\" disableSticky>Other Clusters</ListSubheader>\n                {\n                    remainingClusters.map((cluster: string) => (\n                        <ListItem onClick={() => onMoveCluster(cluster, i)} button key={`clusterpicker-${cluster}`}>\n                            <ListItemText primary={cluster} secondary={`size: ${clusters[cluster].size}    density: ${clusters[cluster].quality.toFixed(3)}`} />\n                        </ListItem>)\n                    )\n                }\n                <ListItem onClick={() => onMoveCluster('new', i)} autoFocus button>\n                    <ListItemAvatar>\n                        <Avatar>\n                            <AddIcon />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary=\"Add to new Cluster\" secondary={'The name of the new cluster is \"new\" by default'} />\n                </ListItem>\n            </List>\n        </Dialog>\n  )\n}\n","import { Button, Card, CardActions, CardContent, makeStyles } from '@material-ui/core'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport _ from 'lodash'\nimport React, { useState } from 'react'\nimport { PropsForSidebar } from '../../SidebarOverview'\nimport ClusterChangeCommentDialog from './ClusterChangeCommentDialog'\n\n/**\n * used inside sidebar to display one comment\n * elem is one data point\n */\nexport type CommentProps = {\n    dense?: boolean,\n    /** i the the index of the comment in prop data */\n    i: number,\n    /** callback of cluster change for this comment, or null if not changed */\n    onMoveCluster: (newLabel: string | null, i: number) => void,\n    /** is the comment the one of the representative */\n    isRepresentative?: boolean\n} & PropsForSidebar\n\nconst useStyles = makeStyles<any, { backgroundColor: string }>((theme) => ({\n  styleContainer: props => ({\n    display: 'block',\n    marginLeft: 0,\n    marginRight: 0,\n    marginBottom: theme.spacing(1),\n    backgroundColor: props.backgroundColor,\n    borderRadius: 0\n  }),\n  styleMetaInfos: {\n    display: 'block',\n    width: '100%',\n    height: 'auto'\n  },\n  styleUsername: {\n    display: 'inline',\n    fontWeight: 'bold',\n    wordBreak: 'break-word'\n  },\n  styleComment: {\n    marginBottom: '0',\n    marginTop: '8px',\n    wordBreak: 'break-word'\n  },\n  styleDate: {\n    marginLeft: '8px',\n    display: 'inline',\n    color: 'LightGray',\n    fontStyle: 'italic',\n    fontSize: '0.9em'\n  },\n  btnsContainer: {\n    maxHeight: 0,\n    overflow: 'hidden',\n    transitionDelay: '0.2s',\n    transition: 'max-height 0.3s',\n    paddingRight: theme.spacing(3),\n    paddingLeft: theme.spacing(3),\n    width: '100%'\n  },\n  rightAlign: {\n    display: 'block',\n    marginLeft: 'auto',\n    marginRight: '0'\n  },\n  tooltip: {\n    fontSize: '0.8em'\n  }\n}))\n\n// styles for card content --> make denser\nconst useCardContentStyles = makeStyles(theme => ({\n  root: {\n    paddingTop: 8,\n    paddingBottom: 0,\n    paddingLeft: 16,\n    paddingRight: 16\n  }\n}))\n\nexport default function Comment ({ dense = false, data, i, onMoveCluster, added = false, removed = false, isRepresentative = false, ...other }: CommentProps) {\n  const backgroundColor: string = added ? '#1d3d17' : removed ? '#3d171b' : 'auto'\n  const classes = useStyles({ backgroundColor: backgroundColor })\n  const cardContentStyles = useCardContentStyles()\n  const { publishedAt, authorName, cleaned } = data![i]\n  const [showClusterChangeDialog, setShowClusterChangeDialog] = useState(false)\n\n  const showPoint = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    other.setHoveredCommentCoordinate(i)\n  }\n\n  const hidePoint = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    other.setHoveredCommentCoordinate(null)\n  }\n\n  const dataPoint = _.find(other.dataChanged, ['i', i])\n\n  return (\n        <Card onMouseEnter={showPoint} onMouseLeave={hidePoint} className={classes.styleContainer}>\n            <CardContent classes={cardContentStyles}>\n                {dataPoint && <p style={{ marginLeft: 0 }} className={classes.styleDate}>{`from cluster ${dataPoint?.oldLabel.label_kmedoids} to ${dataPoint?.newLabel.label_kmedoids}`}</p>}\n                <div className={classes.styleMetaInfos}>\n                    <p className={classes.styleUsername}>{authorName}</p>\n                    <p className={classes.styleDate}>{publishedAt}</p>\n                </div>\n                <p className={classes.styleComment}>{cleaned}</p>\n            </CardContent>\n            <CardActions>\n                {isRepresentative\n                  ? (<Tooltip classes={{ tooltip: classes.tootltip }} title=\"As this comment represents the whole cluster, it may not be moved. Use the Merge Clusters Field to merge the whole cluster with another.\">\n                        <span><Button onClick={() => null} disabled>Move to other Cluster</Button></span>\n                    </Tooltip>)\n                  : <Button onClick={() => setShowClusterChangeDialog(true)}>Move to other Cluster</Button>\n                }\n            </CardActions>\n            <ClusterChangeCommentDialog\n                open={showClusterChangeDialog}\n                onMoveCluster={(clusterSelected) => {\n                  setShowClusterChangeDialog(false)\n                  onMoveCluster(clusterSelected, i)\n                }}\n                i={i}\n                data={data}\n                {...other}\n            />\n        </Card>\n  )\n}\n","import { Button, Divider, ListItem, ListItemSecondaryAction, ListItemText, makeStyles, Typography } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport { DataPoint } from '../../Data'\nimport { PropsForSidebar } from '../../SidebarOverview'\nimport ClusterChangeCommentDialog from './ClusterChangeCommentDialog'\n\nexport type CommentProps = {\n    /** the datapoint to show */\n    d: DataPoint\n    /** i the the index of the comment in prop data */\n    i: number,\n    /** callback of cluster change for this comment, or null if not changed */\n    onMoveCluster: (newLabel: string | null, i: number) => void,\n    /** is the comment the one of the representative */\n    isRepresentative?: boolean\n} & PropsForSidebar\n\nconst useStyles = makeStyles(theme => ({\n  inline: {\n    display: 'inline'\n  },\n  // secondary list actions are positioned absolutely in material-ui\n  // this style is applied to the other (!) elements if secondary\n  // action is used\n  secondaryAction: {\n    paddingRight: '80px'\n  }\n}))\n\nexport default function ListItemComment (props: CommentProps) {\n  const classes = useStyles()\n  const [showClusterChangeDialog, setShowClusterChangeDialog] = useState(false)\n\n  const showPoint = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    props.setHoveredCommentCoordinate(props.i)\n  }\n\n  const hidePoint = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    props.setHoveredCommentCoordinate(null)\n  }\n\n  return (\n        <>\n            <ListItem key={props.d.i} classes={{ secondaryAction: classes.secondaryAction }}>\n                <ListItemText\n                    onMouseEnter={showPoint}\n                    onMouseLeave={hidePoint}\n                    primary={props.d.authorName}\n                    secondary={\n                        <>\n                            <Typography\n                                component=\"span\"\n                                variant=\"body2\"\n                                className={classes.inline}\n                                style={{ wordBreak: 'break-word' }}\n                            >\n                                {`${props.d.publishedAt} - `}\n                            </Typography>\n                            <Typography\n                                component=\"span\"\n                                variant=\"body2\"\n                                color=\"textPrimary\"\n                                style={{ wordBreak: 'break-word' }}\n                            >\n                                {props.d.cleaned}\n                            </Typography>\n                        </>\n                    }\n                />\n                <ListItemSecondaryAction>\n                    <Button onClick={() => setShowClusterChangeDialog(true)}>Move</Button>\n                </ListItemSecondaryAction>\n            </ListItem>\n            <Divider />\n            <ClusterChangeCommentDialog\n                {...props}\n                open={showClusterChangeDialog}\n                onMoveCluster={(clusterSelected) => {\n                  setShowClusterChangeDialog(false)\n                  props.onMoveCluster(clusterSelected, props.i)\n                }}\n                i={props.i}\n                data={props.data}\n            />\n        </>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { ChangedClusterName, DataPoint } from '../../Data'\nimport { PropsForSidebar } from '../../SidebarOverview'\nimport ClusterMenu from './ClusterMenu'\nimport Comment from './Comment'\nimport { makeStyles, Typography } from '@material-ui/core'\nimport _ from 'lodash'\nimport List from '@material-ui/core/List'\nimport ListItemComment from './ListItemComment'\n\nconst useStyles = makeStyles(theme => ({\n  padding: {\n    padding: theme.spacing(2)\n  },\n  coverSidebar: {\n    position: 'relative',\n    width: '100%',\n    height: '100vh',\n    overflow: 'scroll',\n    transition: 'all 0.3s',\n    backgroundColor: '#222'\n  },\n  root: {\n    width: '100%'\n  }\n}))\n\ntype ClusterDetailsLayoutProps = PropsForSidebar\n\nlet prevSelectedCluster: string | null = ''\nlet prevLabelLocal: string = ''\n\nexport default function ClusterDetailsLayout (props: ClusterDetailsLayoutProps) {\n  const { data, dataChanged, pushToDataChanged, labels, selected_datum, selectedCluster } = props\n  const classes = useStyles()\n  const clickedOnCommentRef = useRef<null | HTMLDivElement>(null)\n  const [labelLocal, _setLabelLocal] = useState(selectedCluster || '')\n  const setLabelLocal = (val: string) => {\n    prevLabelLocal = val\n    _setLabelLocal(val)\n\n    props.setChangedClusterName({\n      original: props.selectedCluster,\n      changed: val\n    } as ChangedClusterName)\n  }\n  // select only unchanged data of cluster, without selected point\n  const dataOfCluster = data!.filter((d, i) => {\n    if (labels === null) return false\n    const hasMovedAlready = _.find(dataChanged, ['i', d.i]) // undefined if not found\n    const isSelectedDatum = (i === selected_datum)\n    const sameCluster = (labels[i].label_kmedoids == selectedCluster)\n    return !hasMovedAlready && sameCluster && !isSelectedDatum\n  })\n\n  // select all data that was added to this cluster\n  const dataAddedToThisCluster = dataChanged.filter(el => el.newLabel.label_kmedoids === selectedCluster)\n  // select all data that was removed from this cluster\n  const dataRemovedFromThisCluster = dataChanged.filter(el => el.oldLabel.label_kmedoids === selectedCluster)\n\n  useEffect(() => { // if new point or cluster was clicked on, set to that\n    if (selectedCluster && prevSelectedCluster && prevSelectedCluster != prevLabelLocal) {\n      props.renameLabels([prevSelectedCluster], prevLabelLocal)\n    }\n\n    prevLabelLocal = labelLocal\n    prevSelectedCluster = selectedCluster\n  }, [selectedCluster])\n\n  useEffect(() => { // scroll to selected comment section if point was clicked on projection\n    if (clickedOnCommentRef.current) clickedOnCommentRef.current.scrollIntoView({ behavior: 'smooth' })\n  }, [selected_datum])\n\n  const onMoveCluster = (newLabel: string | null, i: number) => {\n    if (!newLabel || !labels) return\n    pushToDataChanged({\n      ...data![i],\n      oldLabel: labels[i],\n      newLabel: { label_kmedoids: newLabel }\n    })\n  }\n\n  /**\n     *\n     * @param data\n     * @param type \"normal\" | \"added\" | \"removed\"\n     */\n  const buildComments = (data: DataPoint[], type: 'normal' | 'added' | 'removed') => {\n    return data.map((element, index) => {\n      // eslint-disable-next-line array-callback-return\n      if (index > 20) return\n      return (\n                <Comment onMoveCluster={onMoveCluster} i={element.i} key={`cluster-peer-${index}`}\n                    {...type === 'added' ? { added: true } : type === 'removed' ? { removed: true } : {}}\n                    {...props} dense />\n      )\n    })\n  }\n\n  const buildHeadlineAndInfo = (headline: string, caption: string | null) => (\n        <div className={classes.padding}>\n            <Typography variant='h5'>{headline}</Typography>\n            {caption &&\n                <Typography variant=\"body2\">{caption}</Typography>\n            }\n        </div>\n  )\n\n  const hasRepresentative = props.selectedCluster && props.clusters[props.selectedCluster]?.medoid\n  const otherRepresentatives = props.selectedCluster && props.clusters[props.selectedCluster]?.representatives.length > 0\n\n  return (\n    (selectedCluster)\n      ? (<>\n                <div ref={clickedOnCommentRef}></div>\n                <ClusterMenu labelLocal={labelLocal!} setLabelLocal={setLabelLocal} {...props} />\n                {dataAddedToThisCluster.length != 0 && buildHeadlineAndInfo('Added to this Cluster', 'Here are all comments added to this cluster from another by you in this cycle.')}\n                {dataAddedToThisCluster.length != 0 && buildComments(dataAddedToThisCluster as DataPoint[], 'added')}\n                {dataRemovedFromThisCluster.length != 0 && buildHeadlineAndInfo('Removed from this Cluster', 'Here are all comments removed from this cluster by you in this cycle.')}\n                {dataRemovedFromThisCluster.length != 0 && buildComments(dataRemovedFromThisCluster as DataPoint[], 'removed')}\n                {selected_datum && (\n                    <>\n                        {buildHeadlineAndInfo('Selected Comment', 'The comment of the point clicked on.')}\n                        <Comment onMoveCluster={onMoveCluster} i={selected_datum} {...props} />\n                    </>\n                )}\n                {hasRepresentative && buildHeadlineAndInfo('Cluster Representative', 'The comment best representing all other comments of this cluster.')}\n                {hasRepresentative && <Comment onMoveCluster={onMoveCluster} isRepresentative i={props.clusters[props.selectedCluster!].medoid || 0} {...props} />}\n                {otherRepresentatives && buildHeadlineAndInfo('Overview Comments', 'Distinct comments of this cluster, representing different sub-topics of this cluster.')}\n                {otherRepresentatives && props.clusters[props.selectedCluster!].representatives.map(\n                  reprs_index => (\n                        <Comment key={`representative-${reprs_index}`} onMoveCluster={onMoveCluster} i={reprs_index} {...props} />\n                  )\n                )}\n                {buildHeadlineAndInfo('Other Comments', 'A sample of other comments of this cluster.')}\n                <List className={classes.root}>\n                    {dataOfCluster.slice(0, 20).map((d: DataPoint) =>\n                      (<ListItemComment d={d} i={d.i} onMoveCluster={onMoveCluster} key={`list comment ${d.i}`} {...props}/>)\n                    )}\n                </List>\n            </>)\n      : <div className={classes.coverSidebar} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                <Typography style={{ padding: 16 }}>Click on a point or on a cluster in the left panel to see its details here!</Typography>\n            </div>\n  )\n}\n","import React from 'react'\nimport ClusterDetailsLayout from './ClusterDetailsLayout.tsx'\n\nexport default function ClusterDetails (props) {\n  return <ClusterDetailsLayout {...props} />\n}\n","// this is the right SideBar, showing details\n// of the cluster selected\nimport React from 'react'\nimport { createUseStyles } from 'react-jss'\nimport { PropsFromData } from './Data'\nimport { LayoutState } from './Layout'\nimport ClusterDetails from './SidebarElements/ClusterDetails'\n\nconst useStyles = createUseStyles({\n  sidebarContainer: {\n    width: '100%',\n    height: '100vh',\n    overflow: 'hidden',\n    display: 'block'\n  },\n  coverSidebar: {\n    position: 'relative',\n    width: '100%',\n    height: '100vh',\n    overflow: 'scroll',\n    transition: 'all 0.3s',\n    backgroundColor: '#222'\n  }\n})\n\nexport type PropsForSidebar = {\n    sidebar_orientation: string,\n    selected_datum: number | null,\n    selectedCluster: string | null,\n    selectCluster: (newSelectedCluster: string) => void,\n    setSelectedDatum: (newDatumIndex: number | null) => void,\n} & LayoutState & PropsFromData\n\nexport default function SidebarDetails (props: PropsForSidebar) {\n  const classes = useStyles()\n\n  return (\n        <div className={classes.sidebarContainer}>\n            <div className={classes.coverSidebar}>\n                <ClusterDetails {...props} key={`${props.selectedCluster}`} />\n            </div>\n        </div>\n  )\n}\n","// this file builds the layout of the interface\nimport lunr from 'lunr'\nimport * as _ from 'lodash'\nimport React, { Component } from 'react'\nimport SplitPane from 'react-split-pane'\nimport { PropsFromData } from './Data'\nimport Projection, { PropsForProjection } from './ProjectionElements/Projection'\nimport ProjectionParameters from './ProjectionElements/ProjectionParameters'\nimport SidebarOverview, { PropsForSidebar } from './SidebarOverview'\nimport SidebarDetails from './SidebarDetails'\n\nconst minSizePanel = 350\n\nexport type LayoutState = {\n  ww: number | null,\n  wh: number | null,\n  sidebar_height: number | null,\n  /** is the index of the comment clicked on by the user in the projection, or null if nothing selected */\n  selected_datum: number | null,\n  searchInput: string,\n  // for faster lookup, as object of form {'id':position, ...} with position being rank in results\n  searchResultIndices: object,\n  /** is the cluster of which user wants a detail view */\n  selectedCluster: string | null,\n  sidebar_width: number | null,\n  /** the width in px of the svg element */\n  svg_width: number | null,\n  /** at every drag of the user, we need to redraw the svg element. This is done with the key prop */\n  svgKey: string\n}\n\nclass Layout extends Component<PropsFromData, LayoutState> {\n  sidebar_ctx: any | null\n  sidebar_mount: HTMLDivElement | null = null\n\n  constructor(props: PropsFromData) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      sidebar_height: null,\n      sidebar_width: null,\n      svg_width: null,\n      selected_datum: null,\n      searchInput: '',\n      searchResultIndices: {},\n      selectedCluster: null,\n      svgKey: '1'\n    }\n    this.sidebar_ctx = null\n    this.setSize = _.debounce(this.setSize.bind(this), 200)\n    this.setSelectedDatum = this.setSelectedDatum.bind(this)\n    this.updateSearchResultIndices = this.updateSearchResultIndices.bind(this)\n    this.selectCluster = this.selectCluster.bind(this)\n  }\n\n  selectCluster(newLabel: string) {\n    this.setState({\n      selectedCluster: newLabel\n    })\n    this.props.setChangedClusterName({\n      original: newLabel,\n      changed: newLabel\n    })\n  }\n\n  setSize() {\n    const sidebar_height = this.sidebar_mount?.offsetHeight || 0\n    const sidebar_width = _.max([window.innerWidth / 4 || 350, 350]) || 350\n    const svg_width = _.min([window.innerWidth - (2 * minSizePanel), 0.5 * window.innerWidth]) || window.innerWidth - (2 * minSizePanel)\n    this.setState({\n      sidebar_height: sidebar_height,\n      sidebar_width: sidebar_width,\n      svg_width: svg_width,\n      ww: window.innerWidth,\n      wh: window.innerHeight\n    })\n  }\n\n  UNSAFE_componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  haveEmbeddingsChanged(prevProps: PropsFromData) {\n    return prevProps.embeddings !== this.props.embeddings || prevProps.embeddings.length !== this.props.embeddings.length\n  }\n\n  /**\n   * sets the selected datum which causes it to show in the sidebar\n   * @param {int} i is the index of the selected datum\n   */\n  setSelectedDatum(i: number | null) {\n    if (!this.props.labels) return\n    this.setState({\n      selected_datum: i,\n      selectedCluster: (i) ? this.props.labels[i].label_kmedoids : null\n    })\n  }\n\n  updateSearchResultIndices(searchTerm: string) {\n    if (searchTerm.length < 1) return\n    const searchResults = this.props.searchIndex?.search(searchTerm)\n    const searchResultsCleaned: any = searchResults?.map((result: lunr.Index.Result, i) => [result.ref, i])\n    this.setState({\n      searchInput: searchTerm,\n      searchResultIndices: Object.fromEntries(searchResultsCleaned),\n      selected_datum: null // empty sidebar\n    })\n  }\n\n  render() {\n    const sidebar_ctx = this.sidebar_ctx\n    const sidebar_style: any = {\n      height: this.state.wh,\n      overflow: 'auto',\n      background: '#222',\n      display: 'flex',\n      flexDirection: 'column'\n    }\n    const main_style: any = {\n      position: 'inline-block',\n      height: this.state.wh,\n      background: '#111',\n      overflow: 'hidden'\n    }\n\n    const sidebar_orientation = 'vertical'\n\n    const propsForSidebar: PropsForSidebar = {\n      ...this.props,\n      ...this.state,\n      setSelectedDatum: this.setSelectedDatum,\n      selectCluster: this.selectCluster,\n      sidebar_orientation: sidebar_orientation\n    }\n\n    // show all coordinates to show in array of array which is more performant\n    const allCoordinatesAsArrayFilt = this.props.allCoordinates!\n      .filter(d => this.props.clustersToShow.includes(this.props.labels?.[d.index].label_kmedoids || '')) // only comments of clusters set visible\n      .map(d => [d.x, d.y, d.index])\n\n    const propsForProjection: PropsForProjection = {\n      ...this.props,\n      width: this.state.svg_width || 0,\n      height: main_style.height,\n      sidebar_ctx: sidebar_ctx,\n      selectedCluster: this.state.selectedCluster,\n      setSelectedDatum: this.setSelectedDatum,\n      selected_datum: this.state.selected_datum,\n      searchResultIndices: this.state.searchResultIndices,\n      selectCluster: this.selectCluster,\n      allCoordinatesAsArray: allCoordinatesAsArrayFilt\n    }\n\n    /* code for search bar, add above SplitPane\n    <div style={general_style}>\n        <div style={{ position: 'absolute', zIndex: 10, left: '50%', marginLeft: '-10vw', right: '50%', top: '4vh', width: '30vw' }}>\n          <SearchBar\n            value={this.state.searchInput}\n            onChange={this.updateSearchResultIndices}\n          />\n        </div>\n        splitpane\n    </div>\n    */\n\n    return this.state.ww! !== null\n      ? (<SplitPane\n        split=\"vertical\"\n        minSize={minSizePanel}\n        maxSize={700}\n        defaultSize={this.state.sidebar_width || minSizePanel}\n        onChange={(newWidth) => {\n          this.setState({\n            sidebar_width: newWidth + 8,\n            svgKey: `${parseInt(this.state.svgKey) + 1}` // forces redrawing of component\n          })\n        }\n        }\n      >\n        <div\n          style={sidebar_style}\n          ref={sidebar_mount => {\n            this.sidebar_mount = sidebar_mount\n          }}\n        >\n          <SidebarOverview {...propsForSidebar} />\n        </div>\n        <SplitPane\n          split=\"vertical\"\n          minSize={400}\n          defaultSize={this.state.svg_width || 400}\n          maxSize={this.state.ww - (2 * minSizePanel)}\n          onChange={(newWidth) => {\n            this.setState({\n              svg_width: newWidth,\n              svgKey: `${parseInt(this.state.svgKey) + 1}` // forces redrawing of component\n            })\n          }\n          }\n        >\n          <div style={main_style}>\n            <ProjectionParameters {...propsForProjection} />\n            <Projection key={this.state.svgKey} {...propsForProjection} />\n          </div>\n          <div style={sidebar_style}>\n            <SidebarDetails {...propsForSidebar} />\n          </div>\n        </SplitPane>\n      </SplitPane>)\n      : <div style={{ padding: '1rem' }}>Loading layout...</div>\n  }\n}\n\nexport default Layout\n","// this class is responsible for loading all data\n// and parsing it into the right format\nimport * as d3 from 'd3'\nimport * as _ from 'lodash'\nimport lunr from 'lunr'\nimport React, { Component } from 'react'\nimport Layout from './Layout'\n\nexport type Coordinate = {\n  x: number,\n  y: number,\n  index: number\n}\n\nexport const min_dists_arr: string[] = ['0.1', '0.2', '0.5', '0.9']\nexport type ParameterMinDist = '0.1' | '0.2' | '0.5' | '0.9'\nexport type MinDist = {\n  '0.1': Coordinate[] | null,\n  '0.2': Coordinate[] | null,\n  '0.5': Coordinate[] | null,\n  '0.9': Coordinate[] | null,\n  [i: string]: Coordinate[] | null\n}\n\nexport const num_neighbors_arr: string[] = ['2', '5', '10', '50']\nexport type ParameterNumNeighbors = '2' | '5' | '10' | '50'\nexport type NumNeighbors = {\n  '2': MinDist,\n  '5': MinDist,\n  '10': MinDist,\n  '50': MinDist,\n  [i: string]: MinDist\n}\n\n/** used to keep track of changed label */\nexport type DataChanged = {\n  oldLabel: Label\n  newLabel: Label\n} & DataPoint\n\nexport type DataPoint = {\n  publishedAt: string,\n  authorName: string,\n  isReply: number,\n  text: string | null,\n  cleaned: string,\n  i: number\n}\n\nexport type Label = {\n  label_kmedoids: string\n}\n\nexport type ClusterInfo = {\n  /** is the index of the medoid of that data point.\n   * medoid might be null for newly created clusters.\n  */\n  medoid: number | null,\n  /** are the indices of representatives of this cluster */\n  representatives: number[],\n  size: number,\n  quality: number\n}\n\nexport type Cluster = {\n  [cluster: string]: ClusterInfo\n}\n\nexport type ChangedClusterName = {\n  original: String,\n  changed: String\n}\n\ntype State = {\n  /** this has actually all coordinates, unlike allCoordinates,\n   * which has a sample for all parameters */\n  allCoordinatesFull: NumNeighbors | null,\n  /** samples to show of selected coordinate parameters */\n  allCoordinates: Coordinate[] | null,\n  /** true iff coordinates are reloading */\n  coordsAreReloading: boolean,\n  coordinatesParameters: {\n    numNeighborsParameter: ParameterNumNeighbors,\n    minDistParameter: ParameterMinDist,\n  }\n  coordinates_to_show: number, // i.e. all svg circles to show\n  data: DataPoint[] | null,\n  /** data that was moved between clusters */\n  dataChanged: DataChanged[]\n  labels: Label[] | null,\n  searchIndex: lunr.Index | null,\n  /** is an array of cluster names to show on the projection */\n  clustersToShow: string[],\n  /** meta info about each cluster in a dictionary */\n  clusters: Cluster,\n  /** the coordinate of the comment the user hovers over, or null if not hovering */\n  hoveredCommentCoordinate: Coordinate | null,\n  /** the copy of the original cluster name and the current local change */\n  changedClusterName: ChangedClusterName | null\n}\n\nexport type PropsFromData = {\n  /** reloads newSize many coordinates that will be shown in Projection  */\n  reloadCoordinatesWithSize: (newSize: number, callback?: () => void) => void,\n  setSelectedCoordinates: (numNeighbors: ParameterNumNeighbors, minDist: ParameterMinDist) => void,\n  /**\n   *\n   * @param clusters is an array of labels of the clusters to show\n   */\n  setClustersToShow: (clusters: string[], callback?: () => void) => void,\n  /**\n   * changes all occurences of oldLabel to newLabel inside labels and\n   * clustersToShow.\n   * Make sure to handle all lower lying variables, e.g. selectedCluster,\n   * yourself.\n   * @param oldLabels\n   * @param newLabel\n   */\n  renameLabels: (oldLabels: string[], newLabel: string) => void,\n  /**\n   * adds new entry to dataChanged\n   * if entry with same i property already exists, then first remove that.\n   * if oldlabel is the same as newlabel, then remove and don't add\n   * updates clusters state too\n   */\n  pushToDataChanged: (newDataChange: DataChanged) => void,\n  /**\n   * sets hoveredCommentCoordinate to the coordinate associated with\n   * comment_index, or null of comment_index is null\n   */\n  setHoveredCommentCoordinate: (comment_index: number | null) => void,\n  /** set changedClusterName, i.e. object which keeps track of the local\n   * changes of a cluster name.\n   *\n   * Reset whenever a different cluster is selected.\n   */\n  setChangedClusterName: (changedClusterName: ChangedClusterName) => void,\n  [key: string]: any,\n} & State\n\nexport default class Data extends Component<any, State> {\n  random_indices: number[] | null = null\n\n  constructor (props: any) {\n    super(props)\n    this.state = {\n      allCoordinatesFull: null,\n      allCoordinates: null,\n      coordsAreReloading: false,\n      coordinatesParameters: {\n        numNeighborsParameter: '10',\n        minDistParameter: '0.1'\n      },\n      coordinates_to_show: 500,\n      data: null,\n      labels: null,\n      searchIndex: null,\n      clustersToShow: Array.from(Array(40).keys()).map(n => `cluster ${n}`),\n      clusters: {},\n      dataChanged: [],\n      hoveredCommentCoordinate: null,\n      changedClusterName: null\n    }\n    this.reloadCoordinatesWithSize = this.reloadCoordinatesWithSize.bind(this)\n    this.setSelectedCoordinates = this.setSelectedCoordinates.bind(this)\n    this.setClustersToShow = this.setClustersToShow.bind(this)\n    this.renameLabels = this.renameLabels.bind(this)\n    this.pushToDataChanged = this.pushToDataChanged.bind(this)\n    this.setHoveredCommentCoordinate = this.setHoveredCommentCoordinate.bind(this)\n    this.setChangedClusterName = this.setChangedClusterName.bind(this)\n  }\n\n  setChangedClusterName (changedClusterName: ChangedClusterName) {\n    this.setState({\n      changedClusterName: changedClusterName\n    })\n  }\n\n  setHoveredCommentCoordinate (comment_index: number | null) {\n    if (!comment_index) {\n      this.setState({\n        hoveredCommentCoordinate: null\n      })\n      return\n    }\n    if (!this.state.allCoordinatesFull) return\n    const allComments = this.state.allCoordinatesFull[this.state.coordinatesParameters.numNeighborsParameter][this.state.coordinatesParameters.minDistParameter]\n    this.setState({\n      hoveredCommentCoordinate: allComments![comment_index]\n    })\n  }\n\n  pushToDataChanged (newData: DataChanged) {\n    const alreadyExisting = _.find(this.state.dataChanged, ['i', newData.i])\n    const newDataChanged = _.without(this.state.dataChanged, alreadyExisting)\n\n    const userRevertedChange = alreadyExisting && alreadyExisting.oldLabel.label_kmedoids == newData.newLabel.label_kmedoids\n    const noChange = !alreadyExisting && newData.oldLabel.label_kmedoids == newData.newLabel.label_kmedoids\n    if (!userRevertedChange || noChange) newDataChanged.push(newData)\n\n    // if new cluster, set clusters\n    if (!this.state.clusters[newData.newLabel.label_kmedoids]) {\n      const copy = { ...this.state.clusters }\n      copy[newData.newLabel.label_kmedoids] = {\n        medoid: null,\n        representatives: [],\n        size: 1,\n        quality: -1\n      }\n      this.setState({\n        clusters: copy\n      })\n    }\n\n    this.setState({\n      dataChanged: newDataChanged as DataChanged[]\n    })\n  }\n\n  renameLabels (oldLabels: string[], newLabel: string) {\n    // rename in clusterToShow\n    const newClustersToShow = this.state.clustersToShow.map(\n      (el, i) => oldLabels.includes(el) ? newLabel : el\n    )\n\n    // rename in labels\n    const labels_new = this.state.labels!.map(\n      (label) => {\n        if (oldLabels.includes(label.label_kmedoids)) {\n          return { label_kmedoids: newLabel } as Label\n        }\n        return label\n      }\n    )\n\n    // rename in clusters\n    const clusters_new: Cluster = _.cloneDeep(this.state.clusters)\n    let didMerge = false\n    for (const oldLabel of oldLabels) {\n      if (oldLabel == newLabel) continue // skip merging if both already have same label\n\n      const isMerging = clusters_new[newLabel]\n      if (isMerging) { // merge if new already exists\n        didMerge = true\n        clusters_new[newLabel] = {\n          medoid: clusters_new[newLabel].medoid,\n          representatives: [...clusters_new[oldLabel].representatives, ...clusters_new[newLabel].representatives],\n          size: clusters_new[oldLabel].size + clusters_new[newLabel].size,\n          quality: -1\n        }\n      } else { // rename else\n        clusters_new[newLabel] = { ...this.state.clusters[oldLabel] }\n      }\n      delete clusters_new[oldLabel]\n    }\n\n    // rename in dataChanged\n    const dataChanged_new = this.state.dataChanged.map(el => // change 'from' field\n      (oldLabels.includes(el.oldLabel.label_kmedoids))\n        ? { ...el, oldLabel: { label_kmedoids: newLabel } }\n        : el\n    ).map(el => // change 'to' field\n      (oldLabels.includes(el.newLabel.label_kmedoids))\n        ? { ...el, newLabel: { label_kmedoids: newLabel } }\n        : el\n    )\n\n    this.setState({\n      clustersToShow: newClustersToShow,\n      labels: labels_new,\n      clusters: clusters_new,\n      dataChanged: dataChanged_new\n    }, () => {\n      if (didMerge) this.calc_quality()\n    })\n  }\n\n  /** updates coordinates of current points to updated coordinate parameters.\n   * Call this function after changing the coordinate parameters\n   *\n   * @param callback is called after allCoordinates is set\n   *\n   * @pre this.state.allCoordinates !== null\n   */\n  updateSelectedCoordinates (callback?: () => void) {\n    if (!this.state.allCoordinatesFull) throw Error('allCoordinates is null')\n\n    const numNeighbors = this.state.coordinatesParameters.numNeighborsParameter\n    const minDist = this.state.coordinatesParameters.minDistParameter\n\n    let coordinates\n    if (!this.state.allCoordinates) {\n      const randIndices = this.getRandomIndices(this.state.labels || [], this.state.coordinates_to_show)\n      coordinates = randIndices.map(i => this.state.allCoordinatesFull![numNeighbors][minDist]![i])\n    } else {\n      // take same points and update coordinates\n      // this allows for nice transitions as the points remain the same\n      coordinates = this.state.allCoordinates!.map(i => this.state.allCoordinatesFull![numNeighbors][minDist]![i.index])\n    }\n\n    this.setState({\n      allCoordinates: coordinates\n    }, callback)\n  }\n\n  setClustersToShow (clusters: string[], callback?: () => void) {\n    this.setState({\n      clustersToShow: clusters\n    })\n  }\n\n  /** unlike getSelectedCoordinates, this returns all coordinates,\n   * not only a sample\n   */\n  _getAllSelectedCoordinates () {\n    if (!this.state.allCoordinatesFull) {\n      console.log('allCoordinatesFull is null')\n      return []\n    }\n    const numNeighbors = this.state.coordinatesParameters.numNeighborsParameter\n    const minDist = this.state.coordinatesParameters.minDistParameter\n    return this.state.allCoordinatesFull[numNeighbors][minDist] || []\n  }\n\n  setSelectedCoordinates (numNeighbors: ParameterNumNeighbors, minDist: ParameterMinDist) {\n    this.setState({\n      coordinatesParameters: {\n        numNeighborsParameter: numNeighbors,\n        minDistParameter: minDist\n      }\n    }, this.updateSelectedCoordinates) // then update svg points\n  }\n\n  /**\n   * scales embeddings to values between [0, 10]\n   * the index key stays untouched.\n   * @param embeddings are the coordinates, has form [{x->val,y->val, index->val},...]\n   * @returns an array of the coordinates of the form [[x, y, index], ...]\n   */\n  scaleEmbeddings (embeddings: Coordinate[]) {\n    const xs = embeddings.map(e => Math.abs(e.x))\n    const ys = embeddings.map(e => Math.abs(e.y))\n    const max_x = _.max(xs) || 0\n    const max_y = _.max(ys) || 0\n    const max = Math.max(max_x, max_y)\n    const scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([0, 100])\n    const scaled_embeddings = embeddings.map(e => {\n      const coordinate_scaled: Coordinate = {\n        x: scale(e.x), y: scale(e.y), index: e.index\n      }\n      return coordinate_scaled\n    }\n    )\n    return scaled_embeddings\n  }\n\n  /**\n   * picks n random elements from arr without duplicates.\n   *\n   * if n is longer than 4/5th of arr's length, random indices of the lenght of the whole\n   * list @param arr is  returned as a random picks would take too many tries to find new indices.\n   *\n   * modified from\n   * https://stackoverflow.com/questions/19269545/how-to-get-a-number-of-random-elements-from-an-array\n   *\n   * @param {*} arr the original giving the shape\n   * @param {*} n how many to pick from\n   */\n  getRandomIndices (arr: any[], n: number) {\n    const indices_arr = Array.from(Array(arr.length).keys()) // why so difficult, js?\n\n    if (n > indices_arr.length * 3 / 5) {\n      return indices_arr\n    }\n\n    const result = new Array(n)\n    let len = indices_arr.length\n    const taken = new Array(len)\n    if (n > len) { throw new RangeError('getRandom: more elements taken than available') }\n    while (n--) {\n      const x = Math.floor(Math.random() * len)\n      result[n] = indices_arr[x in taken ? taken[x] : x]\n      taken[x] = --len in taken ? taken[len] : len\n    }\n    return result\n  }\n\n  /**\n   * how many coordinates to pcik form all clusters to show coordinates\n   * @param howMany how many to numbers to pick from all clusters to show\n   */\n  async loadCoordinates (howMany: number) {\n    const all_coordinates_full: NumNeighbors = {\n      2: { 0.1: null, 0.2: null, 0.5: null, 0.9: null } as MinDist,\n      5: { 0.1: null, 0.2: null, 0.5: null, 0.9: null } as MinDist,\n      10: { 0.1: null, 0.2: null, 0.5: null, 0.9: null } as MinDist,\n      50: { 0.1: null, 0.2: null, 0.5: null, 0.9: null } as MinDist\n    }\n\n    // creates a combination of all above, i.e. [['2', '0.1'], ['2', '0.2'], ...]\n    const allParamsPairs = Object.keys(all_coordinates_full).flatMap(\n      numNeigbor => Object.keys(all_coordinates_full['2'])\n        .map(mindistEl => [numNeigbor, mindistEl])\n    )\n\n    const allPromisesParamPairs: Promise<boolean>[] = allParamsPairs.map(paramaterPair => {\n      const num_neighbors = paramaterPair[0]\n      const min_dist = paramaterPair[1]\n      return fetch(`${process.env.PUBLIC_URL}/coordinates/coordinates_supervised.${num_neighbors}.${min_dist}.json`)\n        .then((fetched: Response) => fetched.json())\n        .then((coordinates: Coordinate[]) => {\n          const scaled_coordinates: Coordinate[] = this.scaleEmbeddings(coordinates)\n          all_coordinates_full[num_neighbors][min_dist] = scaled_coordinates\n          return true\n        })\n    })\n\n    await Promise.all(allPromisesParamPairs)\n\n    return this.setState({\n      allCoordinatesFull: all_coordinates_full\n    }, this.calc_quality) // calc_quality doesnt do anything on first run\n  }\n\n  async reloadCoordinatesWithSize (newSize: number, callback?: () => void) {\n    // if above 80 %, just take all points\n    const size = newSize > 4 / 5 * (this.state.data?.length || 0) ? (this.state.data?.length || 0) : newSize\n\n    const numNeighbors = this.state.coordinatesParameters.numNeighborsParameter\n    const minDist = this.state.coordinatesParameters.minDistParameter\n\n    const randIndices = this.getRandomIndices(this.state.labels || [], size)\n    const coordinates = randIndices.map(i => this.state.allCoordinatesFull![numNeighbors][minDist]![i])\n\n    this.setState({\n      coordinates_to_show: size,\n      allCoordinates: coordinates\n    })\n  }\n\n  async loadDataAndSearchIndex () {\n    const fetched = await fetch(`${process.env.PUBLIC_URL}/data.json`)\n    const data: DataPoint[] = JSON.parse(await fetched.text())\n    data.forEach((el, i) => {\n      el.i = i\n    })\n    const search_index = lunr(function () {\n      this.field('comment')\n      this.field('author')\n      this.field('published')\n\n      for (let i = 0; i < data.length; i++) {\n        this.add({\n          comment: data[i].cleaned,\n          author: data[i].authorName,\n          published: data[i].publishedAt,\n          id: `${i}`\n        })\n      }\n    })\n    this.setState({\n      data: data,\n      searchIndex: search_index\n    })\n  }\n\n  async loadLabels () {\n    const fetched = await fetch(`${process.env.PUBLIC_URL}/labels.json`)\n    let labels: Label[] = JSON.parse(await fetched.text())\n    labels = labels.map(el => {\n      return {\n        label_kmedoids: `cluster ${el.label_kmedoids}`\n      }\n    })\n\n    this.setState({\n      labels: labels\n    })\n  }\n\n  /** normalizes cluster quality so that values are in the range [0,1] */\n  _normalize_clusters (clusters: Cluster) {\n    let maxQuality = 0\n    for (const label in clusters) {\n      maxQuality = clusters[label].quality > maxQuality ? clusters[label].quality : maxQuality\n    }\n    const scale = d3.scaleLinear().domain([0, maxQuality]).range([0, 1])\n    for (const label in clusters) {\n      clusters[label].quality = scale(clusters[label].quality)\n    }\n  }\n\n  /** sets the quality for each cluster.\n   * currently named as density\n   */\n  calc_quality () {\n    // using average of squared euclidean distances\n    const clusters = { ...this.state.clusters }\n    for (const label in clusters) {\n      if (!clusters[label].medoid) return // doesnt happen\n      const coordinates = this._getAllSelectedCoordinates()\n      const medoid_pos = coordinates[clusters[label].medoid!]\n\n      const distances = coordinates.map(\n        (coord) => {\n          // eslint-disable-next-line array-callback-return\n          if (this.state.labels?.[coord.index].label_kmedoids != label) return\n          // is of same cluster:\n          const sqrd_eucl_dist = Math.sqrt(Math.pow(coord.x - medoid_pos.x, 2) + Math.pow(coord.y - medoid_pos.y, 2))\n          return sqrd_eucl_dist\n        }\n      )\n\n      clusters[label].quality = _.mean(distances)\n    }\n\n    this._normalize_clusters(clusters)\n\n    this.setState({\n      clusters: clusters\n    })\n  }\n\n  /** loads cluster representatives from disk and creates clusters state */\n  async loadClusters () {\n    const fetchedReprs = await fetch(`${process.env.PUBLIC_URL}/cluster-representatives.json`)\n    const representatives: { [label: string]: number[] } = JSON.parse(await fetchedReprs.text())\n\n    const fetchedMedoids = await fetch(`${process.env.PUBLIC_URL}/medoids.json`)\n    const medoids: { medoids_indices: number }[] = JSON.parse(await fetchedMedoids.text())\n\n    const clusters: Cluster = {}\n\n    for (const orig_label in representatives) {\n      const changed_label = `cluster ${orig_label}`\n      clusters[changed_label] = {\n        medoid: medoids[parseInt(orig_label)].medoids_indices,\n        representatives: representatives[parseInt(orig_label)],\n        size: 0,\n        quality: 0\n      }\n    }\n\n    for (const label of this.state.labels!) {\n      clusters[label.label_kmedoids].size += 1\n    }\n\n    this.setState({\n      clusters: clusters\n    }, () => this.calc_quality())\n  }\n\n  async componentDidMount () {\n    await Promise.all([\n      this.loadCoordinates(this.state.coordinates_to_show), // embeddings\n      this.loadDataAndSearchIndex(),\n      this.loadLabels()\n    ])\n    await this.setSelectedCoordinates(this.state.coordinatesParameters.numNeighborsParameter, this.state.coordinatesParameters.minDistParameter)\n    await this.loadClusters()\n  }\n\n  render () {\n    const props: PropsFromData = {\n      ...this.state,\n      reloadCoordinatesWithSize: this.reloadCoordinatesWithSize,\n      setSelectedCoordinates: this.setSelectedCoordinates,\n      setClustersToShow: this.setClustersToShow,\n      renameLabels: this.renameLabels,\n      pushToDataChanged: this.pushToDataChanged,\n      setHoveredCommentCoordinate: this.setHoveredCommentCoordinate,\n      setChangedClusterName: this.setChangedClusterName\n    }\n    return this.state.allCoordinates && this.state.data && this.state.labels && this.state.clusters\n      ? (\n      <Layout {...props} />\n        )\n      : (\n        <div style={{ padding: '1rem' }}>Loading data...</div>\n        )\n  }\n}\n","import { createMuiTheme, responsiveFontSizes, ThemeProvider } from '@material-ui/core/styles'\nimport React, { Component } from 'react'\nimport './App.css'\nimport Data from './Data'\n\nconst themeForMaterialComponents = responsiveFontSizes(createMuiTheme({\n  palette: {\n    type: 'dark',\n    secondary: {\n      main: 'rgba(255, 255, 255, 1)',\n      dark: 'rgba(255, 255, 255, 1)',\n      light: 'rgba(255, 255, 255, 1)'\n    },\n    primary: {\n      main: 'rgba(255, 255, 255, 1)',\n      dark: 'rgba(255, 255, 255, 1)',\n      light: 'rgba(255, 255, 255, 1)'\n    },\n    background: {\n      paper: '#303030'\n    }\n  },\n  overrides: {\n    MuiTableRow: {\n      root: {\n        '&$selected': {\n          backgroundColor: 'rgba(255, 255, 255, 0.15)',\n          '&:hover': {\n            backgroundColor: 'rgba(255, 255, 255, 0.05)'\n          }\n        }\n      }\n    }\n  }\n}))\n\nclass App extends Component {\n  render () {\n    return (\n      <ThemeProvider theme={themeForMaterialComponents}>\n        <Data />\n      </ThemeProvider>\n    )\n  }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}