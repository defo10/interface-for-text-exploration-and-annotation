[{"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/index.js":"1","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/App.js":"2","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/serviceWorker.js":"3","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/About.js":"4","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Content.js":"5","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/Separator.js":"6","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/Select.js":"7","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Store.js":"8","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterOverview/ClusterSnippet.js":"9","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/index.js":"10","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/ClusterDetailsLayout.tsx":"11","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Data.tsx":"12","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Layout.tsx":"13","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Sidebar.tsx":"14","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterOverview/ClusterOverview.tsx":"15","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterOverview/ClusterTable.tsx":"16","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/ClusterMenu.tsx":"17","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/MetaInfo.tsx":"18","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/NeoMorphCard.tsx":"19","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterMerger.tsx":"20","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/ProjectionElements/Projection.tsx":"21","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/ProjectionElements/ProjectionParameters.tsx":"22","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/ProjectionElements/Sliders.tsx":"23","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/Comment.tsx":"24","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/ClusterChangeCommentDialog.tsx":"25","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Sidebar2.tsx":"26"},{"size":451,"mtime":1607874062990,"results":"27","hashOfConfig":"28"},{"size":1061,"mtime":1615936830110,"results":"29","hashOfConfig":"28"},{"size":4948,"mtime":1607874062991,"results":"30","hashOfConfig":"28"},{"size":1570,"mtime":1607874062988,"results":"31","hashOfConfig":"28"},{"size":9278,"mtime":1607874062988,"results":"32","hashOfConfig":"28"},{"size":519,"mtime":1609349848460,"results":"33","hashOfConfig":"28"},{"size":753,"mtime":1609877020615,"results":"34","hashOfConfig":"28"},{"size":978,"mtime":1610638122448,"results":"35","hashOfConfig":"28"},{"size":1563,"mtime":1610662485820,"results":"36","hashOfConfig":"28"},{"size":185,"mtime":1611271763856,"results":"37","hashOfConfig":"28"},{"size":6567,"mtime":1614107286148,"results":"38","hashOfConfig":"28"},{"size":17882,"mtime":1616110798543,"results":"39","hashOfConfig":"28"},{"size":6998,"mtime":1614100926578,"results":"40","hashOfConfig":"28"},{"size":913,"mtime":1613586572784,"results":"41","hashOfConfig":"28"},{"size":3247,"mtime":1614178302403,"results":"42","hashOfConfig":"28"},{"size":12634,"mtime":1615919628261,"results":"43","hashOfConfig":"28"},{"size":1802,"mtime":1612972453561,"results":"44","hashOfConfig":"28"},{"size":1277,"mtime":1612014720566,"results":"45","hashOfConfig":"28"},{"size":904,"mtime":1611278770069,"results":"46","hashOfConfig":"28"},{"size":3716,"mtime":1613586619846,"results":"47","hashOfConfig":"28"},{"size":10358,"mtime":1616110798544,"results":"48","hashOfConfig":"28"},{"size":3027,"mtime":1616110798544,"results":"49","hashOfConfig":"28"},{"size":3203,"mtime":1614081518789,"results":"50","hashOfConfig":"28"},{"size":4531,"mtime":1613582925837,"results":"51","hashOfConfig":"28"},{"size":3872,"mtime":1614009016789,"results":"52","hashOfConfig":"28"},{"size":1236,"mtime":1613586598885,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"mxeu8k",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/index.js",[],["126","127"],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/App.js",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/serviceWorker.js",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/About.js",["128"],"import React, { Component } from 'react'\nimport Markdown from 'react-remarkable'\nimport { about_text } from './Content'\n\nclass About extends Component {\n  render() {\n    let { grem, p } = this.props\n    return (\n      <div\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          background: '#222',\n          color: '#fff',\n          paddingTop: grem * 2,\n          overflowY: 'auto',\n          fontSize: 16,\n          lineHeight: 1.5,\n        }}\n      >\n        <div\n          style={{\n            background: '#333',\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            padding: grem / 2,\n          }}\n        >\n          About\n          <button\n            onClick={() => {\n              this.props.toggleAbout(false)\n            }}\n            className=\"hover-555\"\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              height: grem * 2,\n              width: grem * 2,\n              padding: grem / 2,\n              textAlign: 'center',\n              cursor: 'pointer',\n              textDecoration: 'none',\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div\n          style={{\n            maxWidth: grem * 30,\n            margin: '0 auto',\n            padding: grem / 2,\n            color: '#fff',\n          }}\n        >\n          <Markdown>{about_text}</Markdown>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default About\n",["129","130"],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Content.js",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/Separator.js",[],["131","132"],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/Select.js",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Store.js",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterOverview/ClusterSnippet.js",["133"],"import React from 'react';\nimport { createUseStyles } from 'react-jss'\n\nconst useStyles = createUseStyles(\n    {\n        card: {\n            display: 'block',\n            margin: '32px 24px',\n            padding: '4px 16px',\n            position: 'relative',\n            transition: 'all .2s ease-in-out',\n            '&:hover': {\n                boxShadow: '0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23)',\n                marginBottom: '54px'\n            }\n        },\n        neomorphism: {\n            borderRadius: '15px',\n            background: 'linear-gradient(145deg, #373737, #2e2e2e)',\n            boxShadow: '5px 5px 12px #181818, -5px -5px 12px #4e4e4e'\n        },\n        p: {\n            display: 'inline-block',\n            marginBlockStart: '1em',\n            marginBlockEnd: '1em',\n            marginInlineStart: '0px',\n            marginInlineEnd: '1em',\n        },\n    })\n\n/**\n * \n * @param comments is the subset of the data which has label @param label\n * @param label is the label of said comments\n */\nexport default function ClusterSnippet({ label, labels, data, ...otherProps }) {\n    const classes = useStyles()\n\n    const correctLabels = labels.filter(({ label_kmedoids, label_kmeans }) => label_kmedoids === label)\n    const size = correctLabels.length\n\n    const onClick = (e) => null\n\n    return (\n\n        <div className={`${classes.neomorphism} ${classes.card}`}>\n            <h3>{label}</h3>\n            <p className={classes.p}>Size: {size}</p>\n            <p className={classes.p}>Density: 41</p>\n        </div>\n    )\n}","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/index.js",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/ClusterDetailsLayout.tsx",["134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150"],"import React, { useState, useEffect, useRef } from 'react'\nimport { DataPoint, Label } from '../../Data'\nimport { PropsForSidebar } from '../../Sidebar'\nimport Separator from '../Separator'\nimport ClusterMenu from './ClusterMenu'\nimport MetaInfo from './MetaInfo'\nimport Comment from './Comment'\nimport NeoMorphCard from './NeoMorphCard'\nimport { Box, Card, CardContent, makeStyles, Typography } from '@material-ui/core'\nimport ClusterChangeCommentDialog from './ClusterChangeCommentDialog'\nimport _ from 'lodash'\nimport { index } from 'd3'\n\n\nconst useStyles = makeStyles(theme => ({\n    padding: {\n        padding: theme.spacing(2),\n    },\n    coverSidebar: {\n        position: 'relative',\n        width: '100%',\n        height: '100vh',\n        overflow: 'scroll',\n        transition: 'all 0.3s',\n        backgroundColor: '#222'\n    }\n}))\n\ntype ClusterDetailsLayoutProps = PropsForSidebar\n\nlet prevSelectedCluster: string | null = \"\"\nlet prevLabelLocal: string = \"\"\n\nexport default function ClusterDetailsLayout(props: ClusterDetailsLayoutProps) {\n    const { data, dataChanged, pushToDataChanged, labels, selected_datum, selectedCluster } = props\n    const classes = useStyles()\n    const clickedOnCommentRef = useRef<null | HTMLDivElement>(null)\n    const [labelLocal, _setLabelLocal] = useState(selectedCluster || \"\")\n    const setLabelLocal = (val: string) => {\n        prevLabelLocal = val\n        _setLabelLocal(val)\n    }\n    // select only unchanged data of cluster, without selected point\n    const dataOfCluster = data!.filter((d, i) => {\n        if (labels === null) return false\n        const hasChangedAlready = _.find(dataChanged, ['i', d.i]) // undefined if not found\n        const isSelectedDatum = (i === selected_datum)\n        const sameCluster = (labels[i].label_kmedoids == selectedCluster)\n        return !hasChangedAlready && sameCluster && !isSelectedDatum\n    })\n\n    // select all data that was added to this cluster\n    const dataAddedToThisCluster = dataChanged.filter(el => el.newLabel.label_kmedoids === selectedCluster)\n    // select all data that was removed from this cluster\n    const dataRemovedFromThisCluster = dataChanged.filter(el => el.oldLabel.label_kmedoids === selectedCluster)\n\n    useEffect(() => { // if new point or cluster was clicked on, set to that\n        if (selectedCluster && prevSelectedCluster && prevSelectedCluster != prevLabelLocal) {\n            props.renameLabels([prevSelectedCluster], prevLabelLocal)\n        }\n\n        prevLabelLocal = labelLocal\n        prevSelectedCluster = selectedCluster\n    }, [selectedCluster])\n\n    useEffect(() => { // scroll to selected comment section if point was clicked on projection \n        if (clickedOnCommentRef.current) clickedOnCommentRef.current.scrollIntoView({ behavior: 'smooth' })\n    }, [selected_datum])\n\n    const onMoveCluster = (newLabel: string | null, i: number) => {\n        if (!newLabel || !labels) return\n        pushToDataChanged({\n            ...data![i],\n            oldLabel: labels[i],\n            newLabel: { label_kmedoids: newLabel }\n        })\n    }\n\n    /**\n     * \n     * @param data \n     * @param type \"normal\" | \"added\" | \"removed\"\n     */\n    const buildComments = (data: DataPoint[], type: 'normal' | \"added\" | \"removed\") => {\n        return data.map((element, index) => {\n            if (index > 20) return\n            return (\n                <Comment onMoveCluster={onMoveCluster} i={element.i} key={`cluster-peer-${index}`}\n                    {...type === 'added' ? { added: true } : type === 'removed' ? { removed: true } : {}}\n                    {...props} dense />\n            )\n        })\n    }\n\n    const buildHeadlineAndInfo = (headline: string, caption: string | null) => (\n        <div className={classes.padding}>\n            <Typography variant='h5'>{headline}</Typography>\n            {caption &&\n                <Typography variant=\"body2\">{caption}</Typography>\n            }\n        </div>\n    )\n\n    const hasRepresentative = props.selectedCluster && props.clusters[props.selectedCluster]?.medoid\n    const otherRepresentatives = props.selectedCluster && props.clusters[props.selectedCluster]?.representatives.length > 0\n\n    return (\n        (selectedCluster) ?\n            (<>\n                <div ref={clickedOnCommentRef}></div>\n                <ClusterMenu labelLocal={labelLocal!} setLabelLocal={setLabelLocal} {...props} />\n                {dataAddedToThisCluster.length != 0 && buildHeadlineAndInfo('Added to this Cluster', 'Here are all comments added to this cluster from another by you in this cycle.')}\n                {dataAddedToThisCluster.length != 0 && buildComments(dataAddedToThisCluster as DataPoint[], 'added')}\n                {dataRemovedFromThisCluster.length != 0 && buildHeadlineAndInfo('Removed from this Cluster', 'Here are all comments removed from this cluster by you in this cycle.')}\n                {dataRemovedFromThisCluster.length != 0 && buildComments(dataRemovedFromThisCluster as DataPoint[], 'removed')}\n                {selected_datum && (\n                    <>\n                        {buildHeadlineAndInfo('Selected Comment', 'The comment of the point clicked on.')}\n                        <Comment onMoveCluster={onMoveCluster} i={selected_datum} {...props} />\n                    </>\n                )}\n                {hasRepresentative && buildHeadlineAndInfo('Cluster Representative', 'The most centrally located point in the cluster.')}\n                {hasRepresentative && <Comment onMoveCluster={onMoveCluster} isRepresentative i={props.clusters[props.selectedCluster!].medoid || 0} {...props} />}\n                {otherRepresentatives && buildHeadlineAndInfo('Overview Comments', 'Distinct comments of this cluster, giving an overview of all comments of this cluster.')}\n                {otherRepresentatives && props.clusters[props.selectedCluster!].representatives.map(\n                    reprs_index => (\n                        <Comment key={`representative-${reprs_index}`} onMoveCluster={onMoveCluster} i={reprs_index} {...props} />\n                    )\n                )}\n                {buildHeadlineAndInfo('Other Comments', 'A sample of other comments of this cluster.')}\n                {buildComments(dataOfCluster, 'normal')}\n            </>)\n            : <div className={classes.coverSidebar} style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n                <Typography style={{ padding: 16 }}>Click on a point or on a cluster in the left panel to see its details here!</Typography>\n            </div>\n    )\n}",["151","152"],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Data.tsx",["153","154","155","156","157","158","159","160","161","162"],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Layout.tsx",["163","164"],"import * as _ from 'lodash'\nimport React, { Component } from 'react'\nimport SplitPane from 'react-split-pane'\nimport { PropsFromData } from './Data'\nimport Projection, { PropsForProjection } from './ProjectionElements/Projection'\nimport ProjectionParameters from './ProjectionElements/ProjectionParameters'\nimport Sidebar, { PropsForSidebar } from './Sidebar'\nimport Sidebar2 from './Sidebar2'\n\nconst minSizePanel = 350\n\n\nexport type LayoutState = {\n  ww: number | null,\n  wh: number | null,\n  sidebar_height: number | null,\n  /** is the index of the comment clicked on by the user in the projection, or null if nothing selected */\n  selected_datum: number | null,\n  searchInput: string,\n  // for faster lookup, as object of form {'id':position, ...} with position being rank in results\n  searchResultIndices: object,\n  /** is the cluster of which user wants a detail view */\n  selectedCluster: string | null,\n  sidebar_width: number | null,\n  /** the width in px of the svg element */\n  svg_width: number | null,\n  /** at every drag of the user, we need to redraw the svg element. This is done with the key prop */\n  svgKey: string\n}\n\nclass Layout extends Component<PropsFromData, LayoutState> {\n  sidebar_ctx: any | null\n  sidebar_mount: HTMLDivElement | null = null\n\n  constructor(props: PropsFromData) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      sidebar_height: null,\n      sidebar_width: null,\n      svg_width: null,\n      selected_datum: null,\n      searchInput: \"\",\n      searchResultIndices: {},\n      selectedCluster: null,\n      svgKey: \"1\",\n    }\n    this.sidebar_ctx = null\n    this.setSize = _.debounce(this.setSize.bind(this), 200)\n    this.setSelectedDatum = this.setSelectedDatum.bind(this)\n    this.updateSearchResultIndices = this.updateSearchResultIndices.bind(this)\n    this.selectCluster = this.selectCluster.bind(this)\n  }\n\n  selectCluster(newLabel: string | null) {\n    this.setState({\n      selectedCluster: newLabel\n    })\n  }\n\n  setSize() {\n    let sidebar_height = this.sidebar_mount?.offsetHeight || 0\n    let sidebar_width = _.max([window.innerWidth / 4 || 350, 350]) || 350\n    let svg_width = _.min([window.innerWidth - (2 * minSizePanel), 0.5 * window.innerWidth]) || window.innerWidth - (2 * minSizePanel)\n    this.setState({\n      sidebar_height: sidebar_height,\n      sidebar_width: sidebar_width,\n      svg_width: svg_width,\n      ww: window.innerWidth,\n      wh: window.innerHeight,\n    })\n  }\n\n  componentWillMount() {\n    this.setSize()\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  haveEmbeddingsChanged(prevProps: PropsFromData) {\n    return prevProps.embeddings !== this.props.embeddings || prevProps.embeddings.length !== this.props.embeddings.length\n  }\n\n  /**\n   * sets the selected datum which causes it to show in the sidebar \n   * @param {int} i is the index of the selected datum\n   */\n  setSelectedDatum(i: number | null) {\n    if (!this.props.labels) return\n    this.setState({\n      selected_datum: i,\n      selectedCluster: (i) ? this.props.labels[i].label_kmedoids : null\n    })\n  }\n\n\n  updateSearchResultIndices(searchTerm: string) {\n    if (searchTerm.length < 1) return\n    let searchResults = this.props.searchIndex?.search(searchTerm)\n    let searchResultsCleaned: any = searchResults?.map((result: lunr.Index.Result, i) => [result.ref, i])\n    this.setState({\n      searchInput: searchTerm,\n      searchResultIndices: Object.fromEntries(searchResultsCleaned),\n      selected_datum: null, // empty sidebar\n    })\n  }\n\n  render() {\n    let sidebar_ctx = this.sidebar_ctx\n    let line_height = 1.5\n    let sidebar_style: any = {\n      height: this.state.wh,\n      overflow: 'auto', background: '#222',\n      display: 'flex', flexDirection: 'column',\n    }\n    let main_style: any = {\n      position: 'inline-block', height: this.state.wh,\n      background: '#111', overflow: 'hidden',\n    }\n\n    let sidebar_orientation\n    let font_size = 16\n    sidebar_orientation = 'vertical'\n\n    const propsForSidebar: PropsForSidebar = {\n      ...this.props,\n      ...this.state,\n      setSelectedDatum: this.setSelectedDatum,\n      selectCluster: this.selectCluster,\n      sidebar_orientation: sidebar_orientation,\n    }\n\n    // show all coordinates to show in array of array which is more performant\n    const allCoordinatesAsArrayFilt = this.props.allCoordinates!\n      .filter(d => this.props.clustersToShow.includes(this.props.labels?.[d.index].label_kmedoids || \"\"))\n      .map(d => [d.x, d.y, d.index])\n\n    const propsForProjection: PropsForProjection = {\n      ...this.props,\n      width: this.state.svg_width || 0,\n      height: main_style.height,\n      sidebar_ctx: sidebar_ctx,\n      selectedCluster: this.state.selectedCluster,\n      setSelectedDatum: this.setSelectedDatum,\n      selected_datum: this.state.selected_datum,\n      searchResultIndices: this.state.searchResultIndices,\n      selectCluster: this.selectCluster,\n      allCoordinatesAsArray: allCoordinatesAsArrayFilt\n    }\n\n    /* code for search bar, add above splitpane\n    <div style={general_style}>\n        <div style={{ position: 'absolute', zIndex: 10, left: '50%', marginLeft: '-10vw', right: '50%', top: '4vh', width: '30vw' }}>\n          <SearchBar\n            value={this.state.searchInput}\n            onChange={this.updateSearchResultIndices}\n          />\n        </div>\n        splitpane\n    </div>\n    */\n\n    return this.state.ww! !== null ? (\n      <SplitPane\n        split=\"vertical\"\n        minSize={minSizePanel}\n        maxSize={700}\n        defaultSize={this.state.sidebar_width || minSizePanel}\n        onChange={(newWidth) => {\n          this.setState({\n            sidebar_width: newWidth + 8,\n            svgKey: `${parseInt(this.state.svgKey) + 1}` // forces redrawing of component\n          })\n        }\n        }\n      >\n        <div\n          style={sidebar_style}\n          ref={sidebar_mount => {\n            this.sidebar_mount = sidebar_mount\n          }}\n        >\n          <Sidebar {...propsForSidebar} />\n        </div>\n        <SplitPane\n          split=\"vertical\"\n          minSize={400}\n          defaultSize={this.state.svg_width || 400}\n          maxSize={this.state.ww - (2 * minSizePanel)}\n          onChange={(newWidth) => {\n            this.setState({\n              svg_width: newWidth,\n              svgKey: `${parseInt(this.state.svgKey) + 1}` // forces redrawing of component\n            })\n          }\n          }\n        >\n          <div style={main_style}>\n            <ProjectionParameters {...propsForProjection} />\n            <Projection key={this.state.svgKey} {...propsForProjection} />\n          </div>\n          <div style={sidebar_style}>\n            <Sidebar2 {...propsForSidebar} />\n          </div>\n        </SplitPane>\n      </SplitPane>\n    ) : (\n        <div style={{ padding: '1rem' }}>Loading layout...</div>\n      )\n  }\n}\n\nexport default Layout\n","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Sidebar.tsx",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterOverview/ClusterOverview.tsx",["165","166","167"],"import React, { SetStateAction, useState } from 'react';\nimport ClusterSnippet from './ClusterSnippet'\nimport ClusterTable from './ClusterTable';\nimport { PropsForSidebar } from '../../Sidebar';\nimport ClusterMerger from '../ClusterMerger';\nimport { DataPoint } from '../../Data';\nimport { Accordion, AccordionDetails, AccordionSummary, makeStyles, Typography } from '@material-ui/core';\nimport { ExpandMore } from '@material-ui/icons';\n\n\nexport type PropsForClusterOverview = PropsForSidebar\n\nconst useStyles = makeStyles(theme => ({\n    padding: {\n        padding: theme.spacing(2),\n    },\n    root: { // accordion\n        margin: theme.spacing(2)\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n    },\n}))\n\n/**\n * \n * @param comments is the subset of the data which has label @param label\n * @param label is the label of said comments\n */\nexport default function ClusterOverview(props: PropsForClusterOverview) {\n    const classes = useStyles()\n    const expandSentence = \"Click to expand\"\n    const minimizeSentence = \"Click to minimize\"\n    const [mergeExplainer, setMergeExplainer] = useState<string>(expandSentence)\n\n    const buildHeadlineAndInfo = (headline: string, caption: string | null) => (\n        <div className={classes.padding}>\n            <Typography variant='h5'>{headline}</Typography>\n            {caption &&\n                <Typography variant=\"body2\">{caption}</Typography>\n            }\n        </div>\n    )\n\n    const legend = (\n        <div className={classes.padding}>\n            <Typography variant='body2' style={{ backgroundColor: 'rgba(255, 255, 255, 0.15)', padding: '8px'}}>Checked cluster comments are white in the visualization</Typography>\n            <Typography variant='body2' style={{ backgroundColor: 'rgba(245, 124, 0, 0.7)', padding: '8px' }}>The selected cluster's comments are orange in the visualization</Typography>\n        </div>)\n\n    return (\n        <>\n            <Accordion className={classes.root} onChange={() => {\n                if (mergeExplainer === expandSentence) {\n                    setMergeExplainer(minimizeSentence)\n                } else {\n                    setMergeExplainer(expandSentence)\n                }\n            }}>\n                <AccordionSummary\n                    expandIcon={<ExpandMore />}\n                    aria-controls=\"panel1bh-content\"\n                    id=\"panel1bh-header\"\n                >\n                    <Typography className={classes.heading}>Merge Clusters</Typography>\n                    <Typography className={classes.secondaryHeading}>{mergeExplainer}</Typography>\n                </AccordionSummary>\n                <AccordionDetails style={{ display: 'block' }}>\n                    <ClusterMerger {...props} />\n                </AccordionDetails>\n            </Accordion>\n            {buildHeadlineAndInfo('Clusters Overview', \"Browse through all clusters. Check the one's you'd like to see in the visualization. Click on a row to see its details.\")}\n            {legend}\n            <ClusterTable {...props} />\n        </>\n    )\n}","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterOverview/ClusterTable.tsx",["168","169","170"],"import Checkbox from '@material-ui/core/Checkbox';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from 'react';\nimport { Cluster } from '../../Data';\nimport { PropsForSidebar } from '../../Sidebar';\n\ntype Row = {\n    label: string,\n    size: number,\n    metric: string,\n    sizePrct: string\n}\n\ntype OrderBy = 'label' | 'size' | 'metric'\n\ntype ClusterInfoDict = {\n    [label: string]: {\n        'size': number,\n        'metric': number,\n    }\n}\n\nvar labelsAndData = {}\nvar rows: Row[] = []\n\nfunction descendingComparator(a: Row, b: Row, orderBy: OrderBy) {\n    if (b[orderBy] < a[orderBy]) {\n        return -1;\n    }\n    if (b[orderBy] > a[orderBy]) {\n        return 1;\n    }\n    return 0;\n}\n\nfunction getComparator(order: string, orderBy: OrderBy) {\n    return order === 'desc'\n        ? (a: Row, b: Row) => descendingComparator(a, b, orderBy)\n        : (a: Row, b: Row) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array: Row[], comparator: (a: Row, b: Row) => number) {\n    const stabilizedThis = array.map((el, index) => [el, index]);\n    stabilizedThis.sort((a: any, b: any) => {\n        const order = comparator(a[0], b[0]);\n        if (order !== 0) return order;\n        return a[1] - b[1];\n    });\n    return stabilizedThis.map((el) => el[0] as Row);\n}\n\n\nfunction EnhancedTableHead(props: any) {\n    const { classes, onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\n    const createSortHandler = (property: string) => (event: any) => {\n        onRequestSort(event, property);\n    };\n\n    const headCells = [\n        { id: 'label', numeric: false, disablePadding: true, label: 'Cluster Name' },\n        { id: 'size', numeric: true, disablePadding: false, label: 'Size (in\\u00A0%)' },\n        { id: 'metric', numeric: true, disablePadding: false, label: 'Density' },\n    ];\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ 'aria-label': 'show all clusters' }}\n                    />\n                </TableCell>\n                {headCells.map((headCell) => (\n                    <TableCell\n                        key={headCell.id}\n                        align={headCell.numeric ? 'right' : 'left'}\n                        padding={headCell.disablePadding ? 'none' : 'default'}\n                        sortDirection={orderBy === headCell.id ? order : false}\n                    >\n                        <TableSortLabel\n                            active={orderBy === headCell.id}\n                            direction={orderBy === headCell.id ? order : 'asc'}\n                            onClick={createSortHandler(headCell.id)}\n                        >\n                            <Typography style={{ fontWeight: 600 }}>{headCell.label}</Typography>\n                            {orderBy === headCell.id ? (\n                                <span className={classes.visuallyHidden}>\n                                    {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                                </span>\n                            ) : null}\n                        </TableSortLabel>\n                    </TableCell>\n                ))}\n            </TableRow>\n        </TableHead>\n    );\n}\n\nEnhancedTableHead.propTypes = {\n    classes: PropTypes.object.isRequired,\n    numSelected: PropTypes.number.isRequired,\n    onRequestSort: PropTypes.func.isRequired,\n    onSelectAllClick: PropTypes.func.isRequired,\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n    orderBy: PropTypes.string.isRequired,\n    rowCount: PropTypes.number.isRequired,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        color: 'white',\n        backgroundColor: 'unset',\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n    table: {\n        color: 'white',\n    },\n    visuallyHidden: {\n        border: 0,\n        clip: 'rect(0 0 0 0)',\n        height: 1,\n        margin: -1,\n        overflow: 'hidden',\n        padding: 0,\n        position: 'absolute',\n        top: 20,\n        width: 1,\n    },\n}));\n\nconst useTablePaginationStyles = makeStyles((theme) => ({\n    spacer: {\n        flex: '1'\n    },\n    actions: {\n        marginLeft: '0',\n        marginRight: '0'\n    },\n    input: {\n        flex: '1 3 100%',\n        marginLeft: '0',\n        marginRight: '0'\n    },\n    caption: {\n        flex: '1 1 100%'\n    },\n\n}))\n\n\nfunction clustersToRows(clusters: Cluster, sumComments: number) {\n    let rows: Row[] = []\n    for (let label in clusters) {\n        const sizePrct = (clusters[label].size * 100 / sumComments).toFixed(1)\n        rows.push({ 'label': label, 'size': clusters[label].size, 'metric': clusters[label].quality.toFixed(2), 'sizePrct': sizePrct })\n    }\n    return rows\n}\n\ntype PropsClusterTable = PropsForSidebar\nexport default function ClusterTable({\n    labels,\n    data,\n    dataChanged,\n    clustersToShow,\n    setClustersToShow,\n    selectCluster,\n    setSelectedDatum,\n    selectedCluster,\n    ...other }: PropsClusterTable) {\n\n    const classes = useStyles();\n    const classesTablePagination = useTablePaginationStyles()\n    const [order, setOrder] = useState('desc');\n    const [orderBy, setOrderBy] = useState('size' as OrderBy);\n    const [page, setPage] = useState(0);\n    const [rowsPerPage, setRowsPerPage] = useState(10);\n\n    rows = clustersToRows(other.clusters, labels?.length || 0)\n\n    const handleRequestSort = (event: any, property: OrderBy) => {\n        const isAsc = orderBy === property && order === 'asc';\n        setOrder(isAsc ? 'desc' : 'asc');\n        setOrderBy(property);\n    };\n\n    const handleSelectAllClick = (event: any) => {\n        if (event.target.checked) {\n            const newSelecteds = rows.map((n) => n.label);\n            setClustersToShow(newSelecteds);\n            return;\n        }\n        setClustersToShow([]);\n    };\n\n    const handleCheckboxClick = (event: any, name: string) => {\n        const selectedIndex = clustersToShow.indexOf(name);\n        let newSelected: string[] = [];\n\n        if (selectedIndex === -1) { // wasn't clicked before\n            newSelected = newSelected.concat(clustersToShow, name);\n        } else if (selectedIndex === 0) { // \n            newSelected = newSelected.concat(clustersToShow.slice(1));\n        } else if (selectedIndex === clustersToShow.length - 1) { // is last one\n            newSelected = newSelected.concat(clustersToShow.slice(0, -1));\n        } else if (selectedIndex > 0) { // unselected\n            newSelected = newSelected.concat(\n                clustersToShow.slice(0, selectedIndex),\n                clustersToShow.slice(selectedIndex + 1),\n            );\n        }\n\n        setClustersToShow(newSelected);\n    }\n\n    const handleRowClick = (event: any, name: string) => {\n        if (event.target.nodeName === \"INPUT\") return // skip if over checkbox, which is handled by handleCheckboxClick\n        if (selectedCluster !== name) { // change detail view\n            setSelectedDatum(null)\n            selectCluster(name)\n        }\n        // click checkbox if not clicked yet\n        const selectedIndex = clustersToShow.indexOf(name);\n        let newSelected: string[] = [];\n\n        if (selectedIndex === -1) { // wasn't clicked before\n            newSelected = newSelected.concat(clustersToShow, name);\n            setClustersToShow(newSelected);\n        }\n    };\n\n    const handleChangePage = (event: any, newPage: number) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event: any) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n\n    const isSelected = (name: string) => clustersToShow.indexOf(name) !== -1;\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\n\n    const rowsSorted = stableSort(rows, getComparator(order, orderBy))\n\n    useEffect(() => {\n        rows = clustersToRows(other.clusters, data?.length || 0)\n    }, [other.clusters, data]) // if clusters change, update rows\n\n    return (\n        <div>\n            <Paper className={classes.paper}>\n                <TableContainer>\n                    <Table\n                        style={{ width: '100%', minWidth: 'auto' }}\n                        className={classes.table}\n                        aria-labelledby=\"tableTitle\"\n                        size='medium'\n                        aria-label=\"cluster table\"\n                    >\n                        <EnhancedTableHead\n                            classes={classes}\n                            numSelected={clustersToShow.length}\n                            order={order}\n                            orderBy={orderBy}\n                            onSelectAllClick={handleSelectAllClick}\n                            onRequestSort={handleRequestSort}\n                            rowCount={rows.length}\n                        />\n                        <TableBody>\n                            {rowsSorted\n                                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                                .map((row: Row, index: number) => {\n                                    const isItemSelected = isSelected(row.label);\n                                    const labelId = `enhanced-table-checkbox-${index}`;\n                                    selectedCluster === row.label && console.log([selectedCluster, row.label])\n                                    return (\n                                        <TableRow\n                                            hover\n                                            onClick={(event: any) => handleRowClick(event, row.label)}\n                                            role=\"checkbox\"\n                                            aria-checked={isItemSelected}\n                                            tabIndex={-1}\n                                            key={row.label}\n                                            selected={isItemSelected}\n                                            style={selectedCluster === row.label ? {backgroundColor: 'rgba(245, 124, 0, 0.7)'} : {}}\n                                        >\n                                            <TableCell padding=\"checkbox\">\n                                                <Checkbox\n                                                    color='secondary'\n                                                    checked={isItemSelected}\n                                                    inputProps={{ 'aria-labelledby': labelId }}\n                                                    onClick={(event) => handleCheckboxClick(event, row.label)}\n                                                />\n                                            </TableCell>\n                                            <TableCell component=\"th\" id={labelId} scope=\"row\" padding=\"none\">\n                                                {row.label}\n                                            </TableCell>\n                                            <TableCell align=\"right\">{`${row.size} (${row.sizePrct})`}</TableCell>\n                                            <TableCell align=\"right\">{row.metric}</TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n                <TablePagination\n                    classes={classesTablePagination}\n                    rowsPerPageOptions={[10, 20, 45]}\n                    component=\"div\"\n                    count={rows.length}\n                    rowsPerPage={rowsPerPage}\n                    page={page}\n                    onChangePage={handleChangePage}\n                    onChangeRowsPerPage={handleChangeRowsPerPage}\n                />\n            </Paper>\n        </div>\n    );\n}\n","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/ClusterMenu.tsx",["171","172","173","174"],"import AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { ArrowBack } from '@material-ui/icons';\nimport { createStyles, makeStyles, TextField, Theme } from '@material-ui/core';\nimport { PropsForSidebar } from '../../Sidebar'\nimport React, { useEffect, useState } from 'react';\n\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    menuButton: {\n        marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    }\n})\n);\n\ntype PropsClusterMenu = {\n    labelLocal: string,\n    setLabelLocal: (newLabel: string) => void\n} & PropsForSidebar\n\nexport default function ClusterMenu(props: PropsClusterMenu) {\n    const classes = useStyles()\n\n    const handleArrowBack = () => {\n        if (props.selectedCluster! != props.labelLocal) props.renameLabels([props.selectedCluster!], (props.labelLocal || \"No Name\"))\n        props.selectCluster(null)\n        props.setLabelLocal(\"\")\n        props.setSelectedDatum(null)\n    }\n\n    // onChange={(e: any) => props.setLabelLocal(e.target.value)}\n    return (\n        <AppBar position='relative' color='transparent'>\n            <Toolbar>\n                <IconButton edge=\"start\" className={classes.menuButton}\n                    color=\"inherit\" aria-label=\"menu\" onClick={handleArrowBack}>\n                    <ArrowBack />\n                </IconButton>\n                <TextField\n                    inputProps={{ style: { fontSize: '1.5em', fontWeight: 600, padding: '8px'}}}\n                    variant=\"filled\"\n                    value={props.labelLocal}\n                    onChange={(e: any) => props.setLabelLocal(e.target.value)}\n                />\n            </Toolbar>\n        </AppBar>\n    )\n}","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/MetaInfo.tsx",["175","176","177","178"],"import { PropsForSidebar } from '../../Sidebar'\nimport { Cluster, ClusterInfo, DataPoint } from '../../Data'\nimport React from 'react'\nimport TextField from '@material-ui/core/TextField'\nimport NeoMorphCard from './NeoMorphCard'\nimport { makeStyles } from '@material-ui/core/styles'\nimport { Card, CardContent } from '@material-ui/core'\n\n\ntype PropsMetaInfos = {\n    selectedClusterInfo: ClusterInfo\n} & PropsForSidebar\n\nconst useStyles = makeStyles((theme) => ({\n    styleContainer: {\n        display: 'block',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    }\n}))\n\nexport default function MetaInfo(props: PropsMetaInfos) {\n    const classes = useStyles()\n    const { selectedClusterInfo } = props\n\n    const prct = ((selectedClusterInfo?.size || 0) * 100 / (props.data?.length || 1)).toFixed(2)\n    return (\n        <Card className={classes.styleContainer}>\n            <CardContent>\n                <p><b>Size:</b> {selectedClusterInfo?.size || 0} of {props.data?.length} comments in total</p>\n                <p><b>Size (in %):</b> {prct} %</p>\n                <p><b>Density</b> (lower is better): {selectedClusterInfo?.quality?.toFixed(3) || 0}</p>\n            </CardContent>\n        </Card>\n    )\n}",["179","180"],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/NeoMorphCard.tsx",["181","182","183"],"import { PropsForSidebar } from '../../Sidebar'\nimport { createUseStyles } from 'react-jss'\nimport { DataPoint } from '../../Data'\nimport React from 'react'\nimport TextField from '@material-ui/core/TextField'\n\nconst useStyles = createUseStyles(\n    {\n        card: {\n            display: 'block',\n            margin: '32px 24px',\n            padding: '4px 16px',\n            position: 'relative',\n        },\n        neomorphism: {\n            borderRadius: '15px',\n            background: 'linear-gradient(145deg, #373737, #2e2e2e)',\n            boxShadow: '5px 5px 12px #181818, -5px -5px 12px #4e4e4e'\n        },\n    })\n\ntype NeoMorphProps = {\n    children: React.ReactNode\n}\n\nexport default function NeoMorphCard(props: NeoMorphProps) {\n    const classes = useStyles()\n\n    return (\n        <div className={`${classes.neomorphism} ${classes.card}`}>\n            {props.children}\n        </div>\n    )\n}",["184","185"],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterMerger.tsx",["186","187","188","189","190","191"],"import React, { useEffect, useState } from \"react\";\nimport { Button, makeStyles, TextField, Toolbar, Tooltip, Typography } from \"@material-ui/core\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { PropsForSidebar } from \"../Sidebar\";\n\nconst useStyles = makeStyles((theme) => ({\n    horizontalContainer: {\n        paddingRight: theme.spacing(3),\n        paddingLeft: theme.spacing(3),\n        paddingTop: '1em',\n        paddingBottom: '1em',\n        width: 'auto',\n        height: 'auto'\n    },\n    rightAlign: {\n        display: 'block',\n        marginLeft: 'auto',\n        marginRight: '0'\n    },\n    gridContainer: {\n        display: 'grid',\n        gridTemplateColumns: '9fr 1fr',\n        gridRowGap: theme.spacing(1)\n    }\n}));\n\nexport default function ClusterMerger(props: PropsForSidebar) {\n    const classes = useStyles()\n    const [newClusterName, setName] = useState('New Cluster Name')\n    const [firstLabel, setFirstLabel] = useState<string | null>(null)\n    const [secondLabel, setSecondLabel] = useState<string | null>(null)\n\n    const allClusters = Array.from(new Set(props.labels?.map(label => label.label_kmedoids)))\n\n    const merge = () => {\n        if (!firstLabel || !secondLabel) return\n        props.renameLabels([firstLabel, secondLabel], newClusterName)\n        props.setSelectedDatum(null)\n        props.selectCluster(newClusterName)\n        if (!props.clustersToShow.includes(newClusterName)) {\n            props.setClustersToShow([...props.clustersToShow, newClusterName])\n        }\n        setFirstLabel(null)\n        setSecondLabel(null)\n    }\n\n    const groupByVisibleClusters = (option: string) =>\n        (props.clustersToShow?.includes(option))\n            ? \"Visible Clusters\"\n            : \"Other Clusters\"\n\n    /** comparator to sort array by its visibility in the projection */\n    const compareByVisibility = (a: string, b: string) => {\n        const aGroup = groupByVisibleClusters(a)\n        const bGroup = groupByVisibleClusters(b)\n        if (aGroup < bGroup) return 1\n        else if (aGroup === bGroup) return 0\n        else return -1 //(aGroup > bGroup)\n    }\n\n    return (\n        <>\n            <div className={classes.gridContainer}>\n                <Autocomplete\n                    options={allClusters.filter(cluster => cluster != secondLabel).sort(compareByVisibility)}\n                    groupBy={groupByVisibleClusters}\n                    renderInput={(params: any) => <TextField {...params} label=\"First\" variant=\"outlined\" />}\n                    onChange={(e, value) => setFirstLabel(value!)}\n                    value={firstLabel}\n                />\n                <p style={{ textAlign: 'center' }}>+</p>\n                <Autocomplete\n                    options={allClusters.filter(cluster => cluster != firstLabel).sort(compareByVisibility)}\n                    groupBy={groupByVisibleClusters}\n                    renderInput={(params: any) => <TextField {...params} label=\"Second\" variant=\"outlined\" />}\n                    onChange={(e, value) => setSecondLabel(value!)}\n                    value={secondLabel}\n                />\n                <p style={{ textAlign: 'center' }}>=</p>\n                <TextField\n                    variant='outlined'\n                    value={newClusterName}\n                    onChange={(e) => setName(e.target.value)}\n                />\n            </div>\n            <div className={classes.horizontalContainer}>\n                <Button\n                    className={classes.rightAlign}\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={merge}\n                    disabled={!(firstLabel && secondLabel)}\n                >Merge</Button>\n            </div>\n        </>\n    )\n}","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/ProjectionElements/Projection.tsx",["192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207"],"import React, { Component } from 'react'\nimport * as d3 from 'd3'\nimport { Coordinate, PropsFromData } from '../Data'\nimport { ZoomBehavior } from 'd3-zoom'\nimport _, { join, stubFalse } from 'lodash'\n\nexport type PropsForProjection = {\n  width: number,\n  height: number,\n  sidebar_ctx: number,\n  selectedCluster: string | null,\n  selectCluster: (newLabel: string | null) => void,\n  setSelectedDatum: (newDatumIndex: number) => void,\n  selected_datum: number | null,\n  searchResultIndices: object & {\n    [key: string]: any | null\n  },\n  /** this is the same as allCoordinates with only clusters selected to show, but\n   * arranged as array of arrays of form [x, y, index].\n   * This increases the performance substantially\n   * \n   * its actually a number[] but ts was giving errors when unpacking those\n  */\n  allCoordinatesAsArray: any[]\n} & PropsFromData\n\n\nclass Projection extends Component<PropsForProjection, {}> {\n  ref: SVGSVGElement | null = null\n  svg: d3.Selection<SVGSVGElement, any, null, undefined> | null = null\n  group: d3.Selection<SVGGElement, any, null, undefined> | null = null\n  scaleTransform: any = null\n  zoomBehavior: ZoomBehavior<SVGSVGElement, Coordinate> | null = null\n  fillOpacity = 0.8\n  hoverColor = 'rgba(245, 124, 0, 1)' // orange kinda\n\n  constructor(props: PropsForProjection) {\n    super(props)\n    this.state = {}\n  }\n\n  /** \n   * draws scatter plot\n   */\n  drawScatterPlot() {\n    if (!this.ref) return\n\n    const { width, height, setSelectedDatum, allCoordinatesAsArray,\n      clustersToShow, selectCluster, labels } = this.props\n    this.svg = !this.svg ? d3.select(this.ref) : this.svg\n    this.group = !this.group\n      ? this.svg.append('g')\n      : this.group\n\n    const coordsToShow = allCoordinatesAsArray\n    if (coordsToShow.length === 0) return this.svg.selectAll('circle').remove()\n\n    const circles = this.group.selectAll(\"circle\")\n      .data(coordsToShow, ([x, y, index]) => index)\n      .join(\"circle\")\n      .attr('id', ([x, y, index]) => index)\n      .attr(\"cx\", ([x, y, index]) => x)\n      .attr(\"cy\", ([x, y, index]) => y)\n      .attr(\"r\", 0.5)\n      .attr('fill-opacity', this.fillOpacity)\n      .attr(\"fill\", 'white')\n\n    // this click event causes the react lifecycle method componentDidUpdate\n    // to be called. There, we'll update the colors. (the props in this\n    // function body aren't up to date at that point)\n    circles.on(\"click\", event => {\n      let selected_datum_i = parseInt(event.target.id)\n      setSelectedDatum(selected_datum_i)\n      selectCluster(labels![selected_datum_i].label_kmedoids)\n    })\n\n    // zoom behavior\n    this.zoomBehavior = this.getZoomBehavior(this.group)\n    this.svg.call(this.zoomBehavior)\n\n    // start with scaled up init view if first time, else take previours scale state \n    this.svg.call(this.zoomBehavior.transform, this.scaleTransform || this.getInitScale(width, height))\n\n    if (this.props.selectedCluster) this.updateColorPoints()\n  }\n\n  /** \n   * returns function which applies a transformation after each zoom\n   * event (that is, dragging around + zooming).\n   * \n   * @param selection is the selection of nodes which should be transformed\n   * @returns a zoomBehavior function, to be called on the node on which this behavior\n   * should be bound to.\n   */\n  getZoomBehavior(selection: d3.Selection<any | null, any, any | null, any | null>): ZoomBehavior<any, any> {\n    return d3.zoom().on(\"zoom\", ({ transform }) => {\n      this.scaleTransform = transform\n      selection.attr(\"transform\", transform)\n    })\n  }\n\n  /** \n   * @param {int} width the width of the surrounding svg container\n   * @param {int} height the height of the surrounding svg container\n   * @returns a zoom behavior function with a scale factor that scales\n   * the data to width and height\n   * \n   * NOTE: assumes that the scale defined in {Data.js} is [0,100]\n   */\n  getInitScale(width: number, height: number) {\n    const scaleFactor = Math.min(width / 100, height / 100) // factor to either fill horizontally or vertically\n    return d3.zoomIdentity.scale(scaleFactor)\n  }\n\n  componentDidMount() {\n    this.drawScatterPlot()\n  }\n\n  /**\n   * updates all points so that the clicked point and the points belonging\n   * to its cluster have distinct colors\n   */\n  updateColorPoints() {\n    const { selected_datum, labels, allCoordinatesAsArray, clustersToShow } = this.props\n    if (!this.svg || !labels || !this.group) return\n\n    const coordsToShow = allCoordinatesAsArray\n    if (coordsToShow.length === 0) return this.svg.selectAll('circle').remove()\n\n\n    this.group.selectAll('circle')\n      .data(coordsToShow, ([x, y, index]) => index)\n      .attr('fill', ([x, y, index]) => {\n        if (index == selected_datum) return 'cyan'\n        if (this.props.selectedCluster == labels[index].label_kmedoids) return this.hoverColor // orange kinda\n        return 'white'\n      })\n      .attr('fill-opacity', ([x, y, index]) => {\n        if (index == selected_datum) return 1\n        if (this.props.selectedCluster == labels[index].label_kmedoids) return 0.8\n        return this.fillOpacity\n      })\n  }\n\n  highlightSearchResults() {\n    if (!this.svg || !this.group) return\n    const { selected_datum, labels, labelChoice, allCoordinatesAsArray, searchResultIndices, clustersToShow } = this.props\n    const coordsToShow = allCoordinatesAsArray\n    if (coordsToShow.length === 0) return this.group.selectAll('circle').remove()\n\n    this.group.selectAll('circle')\n      .data(coordsToShow, ([x, y, index]) => index)\n      .attr('fill', ([x, y, index]) => {\n        if (searchResultIndices[index]) return this.hoverColor\n        return 'white'\n      })\n  }\n\n  /** highlights the comment the user hovers over in the detail pane */\n  showHoveredComment() {\n    const { selected_datum, labels, allCoordinatesAsArray, clustersToShow, hoveredCommentCoordinate } = this.props\n    if (!this.svg || !labels || !this.group) return\n\n    var coordsToShow = allCoordinatesAsArray\n    if (coordsToShow.length === 0) return this.group.selectAll('circle').remove()\n\n    if (hoveredCommentCoordinate) coordsToShow.push([hoveredCommentCoordinate?.x, hoveredCommentCoordinate?.y, hoveredCommentCoordinate?.index])\n\n    this.group.selectAll('circle')\n      .data(coordsToShow, ([x, y, index]) => index)\n      .join(\n        enter => enter.append('circle')\n          .attr('fill', 'cyan')\n          .attr('fill-opacity', '1')\n          .attr('r', 1)\n          .attr('id', ([x, y, index]) => index)\n          .attr(\"cx\", ([x, y, index]) => x)\n          .attr(\"cy\", ([x, y, index]) => y)\n      )\n  }\n\n  /** zooms around so that cluster center is in the center of svg viewport and all clusters are visible */\n  zoomAroundCluster() {\n    if (!this.zoomBehavior) return\n    if (!this.svg) return\n    if (!this.props.selectedCluster) { // if unselected cluster, show overview\n      const scaleFactor = this.getInitScale(this.props.width, this.props.height)\n\n      this.svg?.transition()\n        .duration(1000)\n        .call(\n          this.zoomBehavior.transform,\n          d3.zoomIdentity.scale(scaleFactor.k)\n        )\n      return\n    }\n\n    const numNeighbors = this.props.coordinatesParameters.numNeighborsParameter\n    const minDist = this.props.coordinatesParameters.minDistParameter\n    if (!this.props.allCoordinatesFull?.[numNeighbors]?.[minDist]) return\n\n    const allCoordsOfSelectedCluster = this.props.labels?.filter(\n      (el, i) => (el.label_kmedoids === this.props.selectedCluster) ? true : false)\n      .map((el, i) => this.props.allCoordinatesFull?.[numNeighbors]?.[minDist]?.[i]!)\n\n    const mean_x = _.meanBy(allCoordsOfSelectedCluster, 'x') || 15\n    const mean_y = _.meanBy(allCoordsOfSelectedCluster, 'y') || 15\n    // TODO max x and max y, min x and min y, then scale factor just like below\n    // position where mean point is in the center of viewport\n    const mean_center_x = this.props.width / 2 - mean_x\n    const mean_center_y = this.props.height / 2 - mean_y\n    const delta_x = _.maxBy(allCoordsOfSelectedCluster, 'x')?.x || 0 - (_.minBy(allCoordsOfSelectedCluster, 'x')?.x || 0)\n    const delta_y = _.maxBy(allCoordsOfSelectedCluster, 'y')?.y || 0 - (_.minBy(allCoordsOfSelectedCluster, 'y')?.y || 0)\n    const scaleFactor = Math.min(this.props.width / delta_x, this.props.height / delta_y)\n\n    this.svg?.transition()\n      .duration(500)\n      .call(\n        this.zoomBehavior.translateTo,\n        mean_x, mean_y\n      )\n      .transition()\n      .duration(500)\n      .call(\n        this.zoomBehavior.scaleTo,\n        scaleFactor * 1.3\n      )\n\n  }\n\n  hasCommentClickedOnChanged(prevProps: PropsForProjection) {\n    return prevProps.selected_datum !== this.props.selected_datum\n  }\n\n  haveCoordinatesChanged(prevProps: PropsForProjection) {\n    return !_.isEqual(_.sortBy(prevProps.allCoordinates), _.sortBy(this.props.allCoordinates))\n  }\n\n  haveSearchResultsChanged(prevProps: PropsForProjection) {\n    return prevProps.searchResultIndices !== this.props.searchResultIndices\n  }\n\n  haveClustersToShowChanged(prevProps: PropsForProjection) {\n    return !_.isEqual(_.sortBy(prevProps.clustersToShow), _.sortBy(this.props.clustersToShow))\n  }\n\n  hasSelectedClusterChanged(prevProps: PropsForProjection) {\n    return prevProps.selectedCluster !== this.props.selectedCluster\n  }\n\n  hasHoveredCommentCoordinateChanged(prevProps: PropsForProjection) {\n    return prevProps.hoveredCommentCoordinate?.index !== this.props.hoveredCommentCoordinate?.index\n  }\n\n  componentDidUpdate(prevProps: PropsForProjection, prevState: {}) {\n    if (this.hasCommentClickedOnChanged(prevProps)) {\n      this.updateColorPoints()\n      return\n    }\n    if (this.hasSelectedClusterChanged(prevProps)) {\n      this.drawScatterPlot()\n      this.updateColorPoints()\n      this.zoomAroundCluster()\n      return\n    }\n    if (this.haveCoordinatesChanged(prevProps) || this.haveClustersToShowChanged(prevProps)) {\n      this.drawScatterPlot()\n      this.updateColorPoints()\n      return\n    }\n    if (this.haveSearchResultsChanged(prevProps)) return this.highlightSearchResults()\n    if (this.hasHoveredCommentCoordinateChanged(prevProps)) return this.showHoveredComment()\n  }\n\n  render() {\n    const { width, height } = this.props\n    return (\n      <svg ref={(ref) => this.ref = ref} width={width} height={height} overflow=\"hidden\"></svg>\n    )\n  }\n}\n\nexport default Projection\n","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/ProjectionElements/ProjectionParameters.tsx",["208","209","210"],"import React, { useState } from \"react\"\nimport { CircularProgress, makeStyles, Select, Theme, Typography } from '@material-ui/core'\nimport SlidersParamter from \"./Sliders\"\nimport { PropsFromData } from \"../Data\"\nimport { truncate } from \"lodash\"\nimport { PropsForProjection } from \"./Projection\"\nimport NativeSelect from \"@material-ui/core/NativeSelect\"\n\n\nconst useStyles = makeStyles<Theme, { width: number, isMouseOver: boolean }>(theme => ({\n    absoluteContainer: {\n        position: 'absolute',\n        margin: `0 ${theme.spacing(1)}`,\n        bottom: theme.spacing(2),\n        opacity: props => props.isMouseOver ? 1.0 : 0.2, // transparent until on mouse over\n        transition: 'opacity 0.1s',\n        display: 'flex',\n        flexWrap: 'wrap',\n        width: '100%'\n    },\n}))\n\ntype SelectOptions = 500 | 4000 | 30000\n\nexport default function ProjectionParameters(props: PropsForProjection) {\n    const [isMouseOver, setIsMouseOver] = useState(false)\n    const [optionSelected, selectOption] = useState(4000 as SelectOptions)\n    const classes = useStyles({ width: props.width, isMouseOver: isMouseOver })\n\n    /*\n    <input name=\"numDataPoints\" type=\"text\" pattern=\"[0-9]*\"\n                    style={{ width: '4em', display: 'inline' }}\n                    value={coordinatesToLoad}\n                    onChange={(e) => {\n                        let size = parseInt(e.target.value) || 0\n                        setCoordinatesToLoad(size)\n                        setIsReloadingCoordinates(true)\n                        props.reloadCoordinatesWithSize(e, () => {\n                            setIsReloadingCoordinates(false)\n                        })\n                    }}\n                ></input>\n    */\n\n    return (\n        <div className={classes.absoluteContainer}\n            onMouseEnter={() => setIsMouseOver(true)}\n            onMouseLeave={() => setIsMouseOver(false)}>\n            <SlidersParamter {...props} />\n            <div style={{ padding: '0 16px' }}>\n                <Typography variant=\"subtitle2\" style={{ display: 'inline', paddingRight: '16px' }}>\n                    Sample Size of Comments to Visualize\n                </Typography>\n                <NativeSelect\n                    value={optionSelected}\n                    onChange={(e) => {\n                        const size = parseInt(e.target.value) || 0\n                        selectOption(size as SelectOptions)\n                        props.reloadCoordinatesWithSize(size)\n                    }}\n                >\n                    <option value={500}>500</option>\n                    <option value={4000}>4000</option>\n                    <option value={30000}>30000 (slow)</option>\n                </NativeSelect>\n                {props.coordsAreReloading && console.log(\"dis happening\") &&\n                    <CircularProgress style={{\n                        display: 'inline-block', marginLeft: '8px'\n                    }} size=\"1em\"></CircularProgress>\n                }\n            </div>\n        </div>\n    )\n}\n","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/ProjectionElements/Sliders.tsx",[],"/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/Comment.tsx",["211"],"import { Button, Card, CardActions, CardContent, makeStyles } from '@material-ui/core'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport _ from 'lodash'\nimport React, { useState } from 'react'\nimport { DataPoint } from '../../Data'\nimport { PropsForSidebar } from '../../Sidebar'\nimport ClusterChangeCommentDialog from './ClusterChangeCommentDialog'\n\n\n/**\n * used inside sidebar to display one comment\n * elem is one data point\n */\n\nexport type CommentProps = {\n    dense?: boolean,\n    /** i the the index of the comment in prop data */\n    i: number,\n    /** callback of cluster change for this comment, or null if not changed */\n    onMoveCluster: (newLabel: string | null, i: number) => void,\n    /** is the comment the one of the representative */\n    isRepresentative?: boolean\n} & PropsForSidebar\n\nconst useStyles = makeStyles<any, { backgroundColor: string }>((theme) => ({\n    styleContainer: props => ({\n        display: 'block',\n        marginLeft: 0,\n        marginRight: 0,\n        marginBottom: theme.spacing(1),\n        backgroundColor: props.backgroundColor,\n        borderRadius: 0,\n    }),\n    styleMetaInfos: {\n        display: 'block',\n        width: '100%',\n        height: 'auto',\n    },\n    styleUsername: {\n        display: 'inline',\n        fontWeight: 'bold'\n    },\n    styleComment: {\n        marginBottom: '0',\n        marginTop: '8px'\n    },\n    styleDate: {\n        marginLeft: '8px',\n        display: 'inline',\n        color: 'LightGray',\n        fontStyle: 'italic',\n        fontSize: '0.9em'\n    },\n    btnsContainer: {\n        maxHeight: 0,\n        overflow: 'hidden',\n        transitionDelay: '0.2s',\n        transition: 'max-height 0.3s',\n        paddingRight: theme.spacing(3),\n        paddingLeft: theme.spacing(3),\n        width: '100%',\n    },\n    rightAlign: {\n        display: 'block',\n        marginLeft: 'auto',\n        marginRight: '0'\n    },\n}))\n\n// styles for card content --> make denser\nconst useCardContentStyles = makeStyles(theme => ({\n    root: {\n        paddingTop: 8,\n        paddingBottom: 0,\n        paddingLeft: 16,\n        paddingRight: 16,\n    }\n}))\n\nexport default function Comment({ dense = false, data, i, onMoveCluster, added = false, removed = false, isRepresentative = false, ...other }: CommentProps) {\n    const backgroundColor: string = added ? '#1d3d17' : removed ? '#3d171b' : \"auto\"\n    const classes = useStyles({ backgroundColor: backgroundColor })\n    const cardContentStyles = useCardContentStyles()\n    const { publishedAt, authorName, cleaned } = data![i]\n    const [showClusterChangeDialog, setShowClusterChangeDialog] = useState(false)\n\n    const showPoint = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        other.setHoveredCommentCoordinate(i)\n    }\n\n    const hidePoint = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        other.setHoveredCommentCoordinate(null)\n    }\n\n    const dataPoint = _.find(other.dataChanged, ['i', i])\n\n    return (\n        <Card onMouseEnter={showPoint} onMouseLeave={hidePoint} className={classes.styleContainer}>\n            <CardContent classes={cardContentStyles}>\n                {dataPoint && <p style={{ marginLeft: 0 }} className={classes.styleDate}>{`from cluster ${dataPoint?.oldLabel.label_kmedoids} to ${dataPoint?.newLabel.label_kmedoids}`}</p>}\n                <div className={classes.styleMetaInfos}>\n                    <p className={classes.styleUsername}>{authorName}</p>\n                    <p className={classes.styleDate}>{publishedAt}</p>\n                </div>\n                <p className={classes.styleComment}>{cleaned}</p>\n            </CardContent>\n            <CardActions>\n                {isRepresentative\n                    ? (<Tooltip title=\"As this comment represents the whole cluster, it may not be moved. Use the Merge Clusters Field to merge the whole cluster with another.\">\n                        <span><Button onClick={() => null} disabled>Move to other Cluster</Button></span>\n                    </Tooltip>)\n                    : <Button onClick={() => setShowClusterChangeDialog(true)}>Move to other Cluster</Button>\n                }\n            </CardActions>\n            <ClusterChangeCommentDialog\n                open={showClusterChangeDialog}\n                onMoveCluster={(clusterSelected) => {\n                    setShowClusterChangeDialog(false)\n                    onMoveCluster(clusterSelected, i)\n                }}\n                i={i}\n                data={data}\n                {...other}\n            />\n        </Card>\n    )\n}","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/SidebarElements/ClusterDetails/ClusterChangeCommentDialog.tsx",["212","213","214","215","216","217","218","219"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport PersonIcon from '@material-ui/icons/Person';\nimport AddIcon from '@material-ui/icons/Add';\nimport Typography from '@material-ui/core/Typography';\nimport { blue } from '@material-ui/core/colors';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Data, { Label } from '../../Data';\nimport { CommentProps } from './Comment';\nimport _ from 'lodash';\n\nconst emails = ['username@gmail.com', 'user02@gmail.com'];\nconst useStyles = makeStyles({\n    avatar: {\n        backgroundColor: blue[100],\n        color: blue[600],\n    },\n});\n\n\ntype ClusterChangeCommentDialogProps = {\n    open: boolean,\n} & CommentProps\n\n\nexport default function ClusterChangeCommentDialog({\n    open,\n    data,\n    labels,\n    clustersToShow,\n    clusters,\n    onClose,\n    i,\n    selectedCluster,\n    onMoveCluster,\n    ...other\n}: ClusterChangeCommentDialogProps) {\n    const classes = useStyles();\n\n    const remainingClusters = _.without(Object.keys(clusters), ...clustersToShow)\n\n    return (\n        <Dialog onClose={() => onMoveCluster(null, i)} aria-labelledby=\"dialog for changing the cluster of the selected comment\" open={open}>\n            <DialogTitle>Change Cluster</DialogTitle>\n            <List>\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\" disableSticky>Selected Cluster</ListSubheader>\n                <ListItem onClick={() => onMoveCluster(selectedCluster, i)} button key={`clusterpicker-${-1}`}>\n                    <ListItemText primary={selectedCluster} secondary={`size: ${clusters[selectedCluster || \"\"]?.size}    density: ${clusters[selectedCluster || \"\"]?.quality.toFixed(3)}`} />\n                </ListItem>\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\" disableSticky>Visible Clusters</ListSubheader>\n                {\n                    clustersToShow.map((cluster: string) => {\n                        if (cluster === labels![i].label_kmedoids) return\n                        return (\n                            <ListItem onClick={() => onMoveCluster(cluster, i)} button key={`clusterpicker-${cluster}`}>\n                                <ListItemText primary={cluster} secondary={`size: ${clusters[cluster]?.size || 'N/A'}    density: ${clusters[cluster]?.quality.toFixed(3) || 'N/A'}`} />\n                            </ListItem>)\n                    })\n                }\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\" disableSticky>Other Clusters</ListSubheader>\n                {\n                    remainingClusters.map((cluster: string) => (\n                        <ListItem onClick={() => onMoveCluster(cluster, i)} button key={`clusterpicker-${cluster}`}>\n                            <ListItemText primary={cluster} secondary={`size: ${clusters[cluster].size}    density: ${clusters[cluster].quality.toFixed(3)}`} />\n                        </ListItem>)\n                    )\n                }\n                <ListItem onClick={() => onMoveCluster('new', i)} autoFocus button>\n                    <ListItemAvatar>\n                        <Avatar>\n                            <AddIcon />\n                        </Avatar>\n                    </ListItemAvatar>\n                    <ListItemText primary=\"Add to new Cluster\" secondary={'The name of the new cluster is \"new\" by default'}/>\n                </ListItem>\n            </List>\n        </Dialog>\n    )\n}","/Users/danstach/Desktop/Studium/7. Semester/BA/project/umap-explorer/src/Sidebar2.tsx",[],{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","severity":1,"message":"225","line":7,"column":17,"nodeType":"226","messageId":"227","endLine":7,"endColumn":18},{"ruleId":"220","replacedBy":"228"},{"ruleId":"222","replacedBy":"229"},{"ruleId":"220","replacedBy":"230"},{"ruleId":"222","replacedBy":"231"},{"ruleId":"224","severity":1,"message":"232","line":42,"column":11,"nodeType":"226","messageId":"227","endLine":42,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":2,"column":21,"nodeType":"226","messageId":"227","endLine":2,"endColumn":26},{"ruleId":"233","severity":1,"message":"235","line":4,"column":8,"nodeType":"226","messageId":"227","endLine":4,"endColumn":17},{"ruleId":"233","severity":1,"message":"236","line":6,"column":8,"nodeType":"226","messageId":"227","endLine":6,"endColumn":16},{"ruleId":"233","severity":1,"message":"237","line":8,"column":8,"nodeType":"226","messageId":"227","endLine":8,"endColumn":20},{"ruleId":"233","severity":1,"message":"238","line":9,"column":10,"nodeType":"226","messageId":"227","endLine":9,"endColumn":13},{"ruleId":"233","severity":1,"message":"239","line":9,"column":15,"nodeType":"226","messageId":"227","endLine":9,"endColumn":19},{"ruleId":"233","severity":1,"message":"240","line":9,"column":21,"nodeType":"226","messageId":"227","endLine":9,"endColumn":32},{"ruleId":"233","severity":1,"message":"241","line":10,"column":8,"nodeType":"226","messageId":"227","endLine":10,"endColumn":34},{"ruleId":"233","severity":1,"message":"242","line":12,"column":10,"nodeType":"226","messageId":"227","endLine":12,"endColumn":15},{"ruleId":"243","severity":1,"message":"244","line":48,"column":55,"nodeType":"245","messageId":"246","endLine":48,"endColumn":57},{"ruleId":"243","severity":1,"message":"247","line":58,"column":75,"nodeType":"245","messageId":"246","endLine":58,"endColumn":77},{"ruleId":"248","severity":1,"message":"249","line":64,"column":8,"nodeType":"250","endLine":64,"endColumn":25,"suggestions":"251"},{"ruleId":"252","severity":1,"message":"253","line":86,"column":29,"nodeType":"254","messageId":"255","endLine":86,"endColumn":35},{"ruleId":"243","severity":1,"message":"247","line":112,"column":48,"nodeType":"245","messageId":"246","endLine":112,"endColumn":50},{"ruleId":"243","severity":1,"message":"247","line":113,"column":48,"nodeType":"245","messageId":"246","endLine":113,"endColumn":50},{"ruleId":"243","severity":1,"message":"247","line":114,"column":52,"nodeType":"245","messageId":"246","endLine":114,"endColumn":54},{"ruleId":"243","severity":1,"message":"247","line":115,"column":52,"nodeType":"245","messageId":"246","endLine":115,"endColumn":54},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","replacedBy":"223"},{"ruleId":"233","severity":1,"message":"256","line":1,"column":10,"nodeType":"226","messageId":"227","endLine":1,"endColumn":19},{"ruleId":"257","severity":1,"message":"258","line":177,"column":23,"nodeType":"259","messageId":"260","endLine":177,"endColumn":25},{"ruleId":"243","severity":1,"message":"244","line":177,"column":66,"nodeType":"245","messageId":"246","endLine":177,"endColumn":68},{"ruleId":"257","severity":1,"message":"258","line":178,"column":7,"nodeType":"259","messageId":"260","endLine":178,"endColumn":9},{"ruleId":"257","severity":1,"message":"261","line":178,"column":7,"nodeType":"259","messageId":"260","endLine":178,"endColumn":9},{"ruleId":"257","severity":1,"message":"261","line":178,"column":27,"nodeType":"259","messageId":"260","endLine":178,"endColumn":29},{"ruleId":"243","severity":1,"message":"244","line":178,"column":62,"nodeType":"245","messageId":"246","endLine":178,"endColumn":64},{"ruleId":"243","severity":1,"message":"244","line":221,"column":20,"nodeType":"245","messageId":"246","endLine":221,"endColumn":22},{"ruleId":"243","severity":1,"message":"247","line":474,"column":63,"nodeType":"245","messageId":"246","endLine":474,"endColumn":65},{"ruleId":"252","severity":1,"message":"253","line":474,"column":73,"nodeType":"254","messageId":"255","endLine":474,"endColumn":79},{"ruleId":"233","severity":1,"message":"262","line":117,"column":9,"nodeType":"226","messageId":"227","endLine":117,"endColumn":20},{"ruleId":"233","severity":1,"message":"263","line":129,"column":9,"nodeType":"226","messageId":"227","endLine":129,"endColumn":18},{"ruleId":"233","severity":1,"message":"264","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":31},{"ruleId":"233","severity":1,"message":"265","line":2,"column":8,"nodeType":"226","messageId":"227","endLine":2,"endColumn":22},{"ruleId":"233","severity":1,"message":"266","line":6,"column":10,"nodeType":"226","messageId":"227","endLine":6,"endColumn":19},{"ruleId":"233","severity":1,"message":"267","line":27,"column":6,"nodeType":"226","messageId":"227","endLine":27,"endColumn":21},{"ruleId":"233","severity":1,"message":"268","line":34,"column":5,"nodeType":"226","messageId":"227","endLine":34,"endColumn":18},{"ruleId":"233","severity":1,"message":"269","line":258,"column":11,"nodeType":"226","messageId":"227","endLine":258,"endColumn":20},{"ruleId":"233","severity":1,"message":"270","line":5,"column":10,"nodeType":"226","messageId":"227","endLine":5,"endColumn":22},{"ruleId":"233","severity":1,"message":"271","line":7,"column":28,"nodeType":"226","messageId":"227","endLine":7,"endColumn":36},{"ruleId":"243","severity":1,"message":"247","line":32,"column":36,"nodeType":"245","messageId":"246","endLine":32,"endColumn":38},{"ruleId":"248","severity":1,"message":"272","line":44,"column":8,"nodeType":"250","endLine":44,"endColumn":31,"suggestions":"273"},{"ruleId":"233","severity":1,"message":"274","line":2,"column":10,"nodeType":"226","messageId":"227","endLine":2,"endColumn":17},{"ruleId":"233","severity":1,"message":"266","line":2,"column":32,"nodeType":"226","messageId":"227","endLine":2,"endColumn":41},{"ruleId":"233","severity":1,"message":"275","line":4,"column":8,"nodeType":"226","messageId":"227","endLine":4,"endColumn":17},{"ruleId":"233","severity":1,"message":"237","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":20},{"ruleId":"220","replacedBy":"276"},{"ruleId":"222","replacedBy":"277"},{"ruleId":"233","severity":1,"message":"278","line":1,"column":10,"nodeType":"226","messageId":"227","endLine":1,"endColumn":25},{"ruleId":"233","severity":1,"message":"266","line":3,"column":10,"nodeType":"226","messageId":"227","endLine":3,"endColumn":19},{"ruleId":"233","severity":1,"message":"275","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":17},{"ruleId":"220","replacedBy":"279"},{"ruleId":"222","replacedBy":"280"},{"ruleId":"233","severity":1,"message":"281","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"282","line":2,"column":41,"nodeType":"226","messageId":"227","endLine":2,"endColumn":48},{"ruleId":"233","severity":1,"message":"283","line":2,"column":50,"nodeType":"226","messageId":"227","endLine":2,"endColumn":57},{"ruleId":"233","severity":1,"message":"284","line":2,"column":59,"nodeType":"226","messageId":"227","endLine":2,"endColumn":69},{"ruleId":"243","severity":1,"message":"247","line":65,"column":68,"nodeType":"245","messageId":"246","endLine":65,"endColumn":70},{"ruleId":"243","severity":1,"message":"247","line":73,"column":68,"nodeType":"245","messageId":"246","endLine":73,"endColumn":70},{"ruleId":"233","severity":1,"message":"285","line":5,"column":13,"nodeType":"226","messageId":"227","endLine":5,"endColumn":17},{"ruleId":"233","severity":1,"message":"286","line":5,"column":19,"nodeType":"226","messageId":"227","endLine":5,"endColumn":28},{"ruleId":"233","severity":1,"message":"287","line":49,"column":7,"nodeType":"226","messageId":"227","endLine":49,"endColumn":21},{"ruleId":"233","severity":1,"message":"287","line":124,"column":60,"nodeType":"226","messageId":"227","endLine":124,"endColumn":74},{"ruleId":"243","severity":1,"message":"244","line":134,"column":19,"nodeType":"245","messageId":"246","endLine":134,"endColumn":21},{"ruleId":"243","severity":1,"message":"244","line":135,"column":40,"nodeType":"245","messageId":"246","endLine":135,"endColumn":42},{"ruleId":"243","severity":1,"message":"244","line":139,"column":19,"nodeType":"245","messageId":"246","endLine":139,"endColumn":21},{"ruleId":"243","severity":1,"message":"244","line":140,"column":40,"nodeType":"245","messageId":"246","endLine":140,"endColumn":42},{"ruleId":"233","severity":1,"message":"288","line":147,"column":13,"nodeType":"226","messageId":"227","endLine":147,"endColumn":27},{"ruleId":"233","severity":1,"message":"289","line":147,"column":29,"nodeType":"226","messageId":"227","endLine":147,"endColumn":35},{"ruleId":"233","severity":1,"message":"290","line":147,"column":37,"nodeType":"226","messageId":"227","endLine":147,"endColumn":48},{"ruleId":"233","severity":1,"message":"287","line":147,"column":94,"nodeType":"226","messageId":"227","endLine":147,"endColumn":108},{"ruleId":"233","severity":1,"message":"288","line":161,"column":13,"nodeType":"226","messageId":"227","endLine":161,"endColumn":27},{"ruleId":"233","severity":1,"message":"287","line":161,"column":60,"nodeType":"226","messageId":"227","endLine":161,"endColumn":74},{"ruleId":"233","severity":1,"message":"291","line":210,"column":11,"nodeType":"226","messageId":"227","endLine":210,"endColumn":24},{"ruleId":"233","severity":1,"message":"292","line":211,"column":11,"nodeType":"226","messageId":"227","endLine":211,"endColumn":24},{"ruleId":"233","severity":1,"message":"293","line":2,"column":40,"nodeType":"226","messageId":"227","endLine":2,"endColumn":46},{"ruleId":"233","severity":1,"message":"294","line":4,"column":10,"nodeType":"226","messageId":"227","endLine":4,"endColumn":23},{"ruleId":"233","severity":1,"message":"295","line":5,"column":10,"nodeType":"226","messageId":"227","endLine":5,"endColumn":18},{"ruleId":"233","severity":1,"message":"266","line":5,"column":10,"nodeType":"226","messageId":"227","endLine":5,"endColumn":19},{"ruleId":"233","severity":1,"message":"296","line":3,"column":8,"nodeType":"226","messageId":"227","endLine":3,"endColumn":14},{"ruleId":"233","severity":1,"message":"297","line":11,"column":8,"nodeType":"226","messageId":"227","endLine":11,"endColumn":18},{"ruleId":"233","severity":1,"message":"284","line":13,"column":8,"nodeType":"226","messageId":"227","endLine":13,"endColumn":18},{"ruleId":"233","severity":1,"message":"298","line":16,"column":8,"nodeType":"226","messageId":"227","endLine":16,"endColumn":12},{"ruleId":"233","severity":1,"message":"234","line":16,"column":16,"nodeType":"226","messageId":"227","endLine":16,"endColumn":21},{"ruleId":"233","severity":1,"message":"299","line":20,"column":7,"nodeType":"226","messageId":"227","endLine":20,"endColumn":13},{"ruleId":"233","severity":1,"message":"300","line":46,"column":11,"nodeType":"226","messageId":"227","endLine":46,"endColumn":18},{"ruleId":"252","severity":1,"message":"253","line":61,"column":68,"nodeType":"254","messageId":"255","endLine":61,"endColumn":74},"no-native-reassign",["301"],"no-negated-in-lhs",["302"],"no-unused-vars","'p' is assigned a value but never used.","Identifier","unusedVar",["301"],["302"],["301"],["302"],"'onClick' is assigned a value but never used.","@typescript-eslint/no-unused-vars","'Label' is defined but never used.","'Separator' is defined but never used.","'MetaInfo' is defined but never used.","'NeoMorphCard' is defined but never used.","'Box' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'ClusterChangeCommentDialog' is defined but never used.","'index' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'labelLocal' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["303"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'constants' is defined but never used.","no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","Unexpected mix of '||' and '&&'.","'line_height' is assigned a value but never used.","'font_size' is assigned a value but never used.","'SetStateAction' is defined but never used.","'ClusterSnippet' is defined but never used.","'DataPoint' is defined but never used.","'ClusterInfoDict' is defined but never used.","'labelsAndData' is assigned a value but never used.","'emptyRows' is assigned a value but never used.","'createStyles' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["304"],"'Cluster' is defined but never used.","'TextField' is defined but never used.",["301"],["302"],"'PropsForSidebar' is defined but never used.",["301"],["302"],"'useEffect' is defined but never used.","'Toolbar' is defined but never used.","'Tooltip' is defined but never used.","'Typography' is defined but never used.","'join' is defined but never used.","'stubFalse' is defined but never used.","'clustersToShow' is assigned a value but never used.","'selected_datum' is assigned a value but never used.","'labels' is assigned a value but never used.","'labelChoice' is assigned a value but never used.","'mean_center_x' is assigned a value but never used.","'mean_center_y' is assigned a value but never used.","'Select' is defined but never used.","'PropsFromData' is defined but never used.","'truncate' is defined but never used.","'Button' is defined but never used.","'PersonIcon' is defined but never used.","'Data' is defined but never used.","'emails' is assigned a value but never used.","'classes' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},"Update the dependencies array to be: [labelLocal, props, selectedCluster]",{"range":"309","text":"310"},"Update the dependencies array to be: [props, props.selectedCluster]",{"range":"311","text":"312"},[2566,2583],"[labelLocal, props, selectedCluster]",[1344,1367],"[props, props.selectedCluster]"]